=encoding utf8

=head1 ИМЯ

perl5160delta - что нового в perl v5.16.0

=head1 Описание

Этот документ описывает различия между релизом 5.14.0 и релизом
5.16.0

Если вы обновляетесь с более раннего релиза, такого как 5.12.0, сначала
прочтите L<perl5140delta>, который описывает различия между 5.12.0 и
5.14.0

=head1 Уведомление

Как описано в L<perlpolicy>, релиз Perl 5.16.0 приводит к официальному
окончанию поддержки для Perl 5.12.  Пользователи Perl 5.12 или более
ранних версий должны рассмотреть вопрос обновления до более свежего
релиза Perl.

=head1 Улучшения Ядра

=head2 C<use I<VERSION>>

Начиная с этого релиза объявление версии вида C<use v5.16> приводит
к отключению всех функций (features), до тех пор пока явно не
включён пакет новых функций. Это означает, что справедлив следующий
код:

    use 5.016;
    # только функционал 5.16 включен здесь
    use 5.014;
    # только функционал 5.14 включен здесь (а не 5.16)

C<use v5.12> и выше продолжают включать режим strict, но явное указание
C<use strict> и C<no strict> переопределяет режим заданный при
объявлении версии, даже если оно идёт раньше в коде:

    no strict;
    use 5.012;
    # здесь no strict

Появился новый ":default" пакет функционала, который представляет
собой набор функций включённых до момента обнаружения любого
объявления версии или C<use feature>.  Объявление версии ниже 5.10
включает ":default" набор функционала.  Это, на самом деле, не меняет
поведения C<use v5.8>, поскольку функции добавленные в набор
":default" это те, которые традиционно были включены по-умолчанию,
до того как их стало можно отключать.

C<< no feature >> сбрасывает к базовому (default) набору функционала.
Для отключения всех функций (что похоже будет довольно специфическим
запросом, т.к. по-видимому не подошёл ни один именной набор) вы
можете написать C<< no feature ':all' >>.

C<$[> теперь отключается при указании C<use v5.16>.  Это часть
базового (default) набора функционала и может быть явно включено или
отключено с использованием C<use feature 'array_base'>.

=head2 C<__SUB__>

Новая лексема C<__SUB__> доступна при подключении функционала
C<current_sub> (смотрите L<feature>) или C<use v5.16>, возвращает
ссылку на текущую подпрограмму, позволяя проще писать рекурсивные
замыкания.

=head2 Новые и Улучшенные Встроенные Функции

=head3 Более логичный C<eval>

Оператор C<eval> иногда воспринимает аргумент строку как
последовательность символов, а иногда как последовательность байтов,
в зависимости от внутренней кодировки. Предполагалось, что внутренняя
кодировка ни на что не должна влиять, но есть код, который зависит от
данной несообразности.

Новые функционалы C<unicode_eval> и C<evalbytes> (включаются при C<use
5.16.0>) решают эту проблему.  Функционал C<unicode_eval> заставляет
C<eval $string> всегда воспринимать строку как Юникод.  Функционал
C<evalbytes> предоставляет функцию, названную C<evalbytes>, которая
обрабатывает аргумент как байтовую строку.

Этот функционал также исправляет странности с фильтрами исходного кода,
протекающих во внешний динамический контекст.

Смотрите подробности в L<feature>.

=head3 Исправление lvalue в C<substr>

=for comment Должно ли это быть здесь или в разделе Несовместимые Изменения?

Когда C<substr> вызывается в lvalue или потенциально lvalue контексте с 
двумя или тремя аргументами, возвращается специальный lvalue скаляр,
который изменяет оригинальную строку (первый аргумент) во время присвоения
ему значения.

Раньше смещение (второй и третий аргументы), передаваемое в C<substr>,
немедленно преобразовывались относительно текущей строки, отрицательные
смещения транслировались в положительные, а смещения за пределами строки
усекались.

Сейчас смещение записывается без изменений в специальный lvalue скаляр,
который возвращается, а оригинальная строка даже не просматривается в
C<substr>, но только до тех пор пока возвращённый lvalue не
просматривается или меняется.

Эти исправления приводят к несовместимому изменению:

Если оригинальная строка изменяет длину после вызова C<substr>, но
до присвоения к её возвращённому значению, отрицательное смещение
запоминает свою позицию от конца строки, влияя на подобный код:

    my $string = "string";
    my $lvalue = \substr $string, -4, 2;
    print $lvalue, "\n"; # напечатает "ri"
    $string = "bailing twine";
    print $lvalue, "\n"; # напечатает "wi"; раньше печатало "il"

То же самое происходит с опущенным третьим аргументом.  Возвращённое
lvalue всегда будет расширяться до конца строки даже если строка
становится больше.

Так как это изменение также позволяет исправить множество багов (смотри
L</Оператор C<substr>>), и так как такое поведение с отрицательными
смещениями никогда не было задокументировано, то это изменение посчитали
приемлемым.

=head3 Возвращаемое значение C<tied>

Значение, возвращаемое C<tied> на связанной переменной, является
скаляром, который содержит объект, с которым связана переменная. Это
позволяет применять к ней weaken C<Scalar::Util::weaken(tied
$tied_variable)>.

=head2 Поддержка Юникода

=head3 Поддерживается (I<почти>) Юникод 6.1

Помимо добавления целых новых скриптов и новых символов в существующих
скриптах, эта новая версия Юникода, как обычно, делает некоторые
изменения в существующих символах.  Есть изменение, которое может
поставить подножку некоторым приложениям: Общая Категория двух
символов в диапазоне Latin-1, PILCROW SIGN и SECTION SIGN, изменилась
с Other_Symbol на Other_Punctuation.  Такое же изменение было сделано
для символа в Тибетском, Эфиопском и Эгейском.
Коды U+3248..U+324F (CIRCLED NUMBER TEN ON BLACK SQUARE по CIRCLED
NUMBER EIGHTY ON BLACK SQUARE) изменили свою Общую Категорию с
Other_Symbol на Other_Numeric.  Свойство Переноса Строки получило
изменение для Иврита и Японского; и как следствие других изменений в
6.1, конструкция регулярных выражений Perl C<\X> сейчас работает
по другому для некоторых символов Тайского и Лао.

Были определены новые псевдонимы (синонимы) для многих значений свойств;
они, вместе с ранее существовавшими, все проиндексированы в разделе
L<perluniprops>.

Возвращаемое значение C<charnames::viacode()> затронуто другими
изменениями:

 Код символа    Старое Имя            Новое Имя
   U+000A    LINE FEED (LF)        LINE FEED
   U+000C    FORM FEED (FF)        FORM FEED
   U+000D    CARRIAGE RETURN (CR)  CARRIAGE RETURN
   U+0085    NEXT LINE (NEL)       NEXT LINE
   U+008E    SINGLE-SHIFT 2        SINGLE-SHIFT-2
   U+008F    SINGLE-SHIFT 3        SINGLE-SHIFT-3
   U+0091    PRIVATE USE 1         PRIVATE USE-1
   U+0092    PRIVATE USE 2         PRIVATE USE-2
   U+2118    SCRIPT CAPITAL P      WEIERSTRASS ELLIPTIC FUNCTION

Perl примет любое из этих имён на входе, но C<charnames::viacode()>
сейчас возвращает новое имя каждой пары.  Изменение для U+2118
рассматривается в Юникоде как коррекция, т.к. предыдущее имя было
ошибкой (повторю снова, старое имя навсегда останется действительным
для использования для обозначения U+2118).  Но большая часть этих
изменений следствие ошибок в Юникоде 6.0 сделанных в именовании
символов, используемых в японских телефонах для обозначения "BELL"
(звонок), которое конфликтует с уже продолжительно используемым в
индустрии (и рекомендуемым Юникодом для использования) этого имени
для обозначения управляющего символа ASCII U+0007.  Как результат,
это имя было признано устаревшим в Perl, начиная с v5.14; и любое
использование приводило к выводу предупреждения (если не отключено).
Имя "ALERT" теперь является предпочтительным для этого кода с
возможностью использования "BEL" как краткой формы.  Имя нового
символа сотового телефона с кодом U+1F514 остаётся неопределённым в
текущей версии Perl (поэтому мы и не можем сказать, что полностью
реализовали весь Юникод 6.1), но начиная с v5.18, BELL будет означать
этот символ, а не U+0007.

Юникод предпринял шаги для того, чтобы быть уверенным, что подобные
ошибки больше не произойдут.  Стандарт сейчас включает все
общепринятые имена и аббревиатуры для управляющих символов, тогда как
раньше он этого не делал (хотя были рекомендуемые имена для
большинства из них, которые использовал Perl).  Это означает, что
большая часть этих рекомендованных имён сейчас официально включены в
Стандарт.  У Юникода не было рекомендаций к именам для четырёх кодов
указанных выше между U+008E и U+008F, и, стандартизируя их, Юникод
изменил имена, которые Perl ранее выбрал для них, заменив финальный
пробел на дефис.  Юникод также официально принял имена, которые Perl
признал устаревшими, такие как FILE SEPARATOR. Сейчас только одно имя
является устаревшим - BELL. Наконец, Perl сейчас использует новые
официальные имена вместо старых (которые считаются вышедшими из
употребления) имён для первых четырёх кодов в списке упомянутом выше
(те которые имели скобки внутри)

Сейчас эти имена попали в стандарт Юникода и подобные изменения больше
не должны происходить, хотя коррекции, как с U+2118, тем не менее
возможны.

Юникод также добавил некоторые аббревиатуры, которые Perl сейчас также
принимает:

SP для SPACE;
TAB для CHARACTER TABULATION;
NEW LINE, END OF LINE, NL, и EOL для LINE FEED;
LOCKING-SHIFT ONE для SHIFT OUT;
LOCKING-SHIFT ZERO для SHIFT IN;
и ZWNBSP для ZERO WIDTH NO-BREAK SPACE.

Детальную информацию об этой версии Юникода можно найти в 
L<http://www.unicode.org/versions/Unicode6.1.0/>.

=head3 C<use charnames> больше не требуется для C<\N{I<name>}>

Когда встречается C<\N{I<name>}>, модуль C<charnames> автоматически
загружается при необходимости с заданными C<:full> и C<:short> опциями.
Смотрите подробности в разделе L<charnames>.

=head3 C<\N{...}> может использовать неточные совпадения имён Юникода

Это описано в разделе C<charnames> в L</Обновлённые Модули и Прагмы>
ниже.

=head3 Юникод в Именах Символов

Сейчас Perl имеет корректную поддержку Юникода для имён символов.
Раньше считалось, что C<*{$foo}> будет игнорировать внутренний UTF8
флаг и использовать байтовое представление для определения символа. Это
означало, что C<*{"\x{100}"}> и C<*{"\xc4\x80"}> возвращали одно и
то же. Все эти части Perl были исправлены для соответствия стандарту
Юникод:

=over

=item *

Имена Методов (включая те, которые передаются в C<use overload>)

=item *

Имена Typeglob (включая имена переменных, подпрограмм и файловых
дескрипторов)

=item *

Имена Модулей

=item *

C<goto>

=item *

Символическое разыменование

=item *

Второй аргумент для C<bless()> и C<tie()>

=item *

Возвращаемое значение C<ref()>

=item *

Прототипов подпрограмм

=item *

Атрибуты

=item *

Различные сообщения предупреждений и ошибок, которые содержат имена
переменных или значения, методы и т.д.

=back

Также был исправлен баг в парсере, который препятствовал неявному
экранирования имени в C<*{é}>, вместо чего интерпретировался как C<*{+é}>,
что приводило к ошибке в режиме strict.

В C<*{"*a::b"}> автоматически удаляется * если за ним следует ASCII
буква. Сейчас это правило распространяется на все буквенные символы
Юникода.

Односимвольные переменные не ASCII и не символы пунктуации (такие
как C<$é>) сейчас могут генерировать предупреждение "Использовалось
только один раз" в соответствующих ситуациях. Ранее они являлись
исключениями, т.к. считались пунктуационными переменными.

Также теперь поддерживаются односимвольные пунктуационные переменные
(такие как C<$‰>) [perl #69032].

=head3 Улучшенная возможность смешивать локали и Юникод, включая UTF-8 локали

Дополнительный параметр добавлен к C<use locale>

 use locale ':not_characters';

который сообщает Perl, что надо использовать все кроме C<LC_CTYPE> и
C<LC_COLLATE> частей текущей локали.  Взамен набор символов предполагается
Юникодом.  Это позволяет локалям и Юникоду быть легко смешанными,
включая всё более часто используемые UTF-8 локали. При использовании
таких гибридных форм локали, может использоваться слой C<:locale> для
прагмы L<open> для взаимодействия с файловой системой, и доступные модули
CPAN для преобразования ARGV и переменных окружения.

Больше деталей в L<perllocale>.

=head3 Новая функция C<fc> и соответствующая экранирующая последовательность C<\F> для Юникод foldcase 

Юникод foldcase это расширение для lowercase, которое даёт лучшие
результаты при регистронезависимом сравнении двух строк. Это давно
использовалось внутренне в регулярных выражениях для поиска совпадений
C</i>.  Сейчас это доступно непосредственно через новый вызов функции
C<fc> (включаемый S<C<"use feature 'fc'">>, или C<use v5.16>, или
явно через вызов C<CORE::fc>) или через новую C<\F> последовательность
в строках с двойными кавычками.

Все подробности в L<perlfunc/fc>.

=head3 Теперь поддерживается свойство Юникод C<Script_Extensions>.

Новое в Юникод 6.0, это улучшенное свойство C<Script>. Детали описаны
в разделе L<perlunicode/Scripts>.

=head2 Изменения в XS

=head3 Улучшенные typemaps для Некоторых Встроенных Типов

Большинство авторов XS в курсе существования давнего бага в OUTPUT
typemap для T_AVREF (C<AV*>), T_HVREF (C<HV*>), T_CVREF (C<CV*>),
и T_SVREF (C<SVREF> илиr C<\$foo>), который требует вручную уменьшать
число ссылок возвращаемого значения вместо того, чтобы typemap сам
позаботился об этом.  Для обратной совместимости это не может быть
изменено в typemap'ах по умолчанию. Но сейчас мы предоставляем
дополнительные typemap'ы C<T_AVREF_REFCOUNT_FIXED> и подобные, которые
не страдают от этого бага.  Использовать их в ваших расширениях также
просто, как иметь дополнительную строку в секции C<TYPEMAP>:

  HV*	T_HVREF_REFCOUNT_FIXED

=head3 C<is_utf8_char()>

Доступная в XS функция C<is_utf8_char()>, при получении на вход специально
сформированной UTF-8 строки, может прочитать на 12 байт за пределы конца
строки.  Это не может быть исправлено без изменения её API.  Функция не
используется на CPAN.  Сейчас в документации описано как безопасно её
использовать.

=head3 Добавлена C<is_utf8_char_buf()>

Эта функция предназначена для замены устаревшей функции
L</is_utf8_char()>. Она включает дополнительный параметр, чтобы быть
уверенным в том, что она не читает за пределами входного буфера.

=head3 Другие C<is_utf8_foo()> функции, так и C<utf8_to_foo()>, т.д..

Большая часть других XS-вызываемых функций, которые получают на вход
UTF-8 кодированную строку предполагают, что UTF-8 полностью корректен
(не искажён) в отношении длины буфера.  Не делайте никаких действий,
таких как изменение регистра символа или проверки является ли он
буквоцифровым символом, без предварительной проверки, что UTF-8 строка
корректна.  Это может быть безопасно выполнено для целых строк при
помощи одной из функций C<is_utf8_string()>, C<is_utf8_string_loc()>,
и C<is_utf8_string_loclen()>.

=head3 Новое Pad API

Много новых функций было добавлено в API для манипуляции с лексическими
панелями.  Смотрите больше информации в L<perlapi/Pad Data Structures>.

=head2 Изменения в Специальных Переменных

=head3 C<$$> можно присваивать значения

C<$$> была сделана доступной только на чтение в Perl 5.8.0.  Но иногда:
C<local $$> делал её доступной для записи снова.  Некоторые CPAN модули
использовали C<local $$> или XS код, чтобы обойти проверку на доступность
только на чтение, поэтому нет никакого смысла оставлять C<$$> доступной
только на чтение.  (Это изменение также позволило исправить баг при
сохранении обратной совместимости)

=head3 C<$^X> преобразуется в абсолютный путь на FreeBSD, OS X и Solaris

Сейчас C<$^X> преобразуется в абсолютный путь на OS X, FreeBSD (без
необходимости монтировать F</proc>) и Solaris 10 и 11. Это улучшает
предыдущий подход по использованию F</proc> on Linux, FreeBSD and NetBSD
(во всех случаях, когда он смонтирован).

Это делает перемещаемые инсталляции perl более полезными на данных
платформах. (Смотри "Перемещаемый @INC" в F<INSTALL>)

=head2 Изменения в Отладчике

=head3 Функции (features) внутри отладчика

Текущий набор L<feature> Perl'а стал доступен для команд вводимых в отладчике
в интерактивном режиме.

=head3 Новая опция для команды отладчика B<t>

Команда отладчика B<t>, которая переключает режим трассировки, сейчас
принимает числовой аргумент, который определяет как много уровней
вызовов подпрограмм надо отслеживать.

=head3 C<enable> и C<disable>

В отладчике появились команды C<disable> и C<enable> для отключения существующих
точек останова и повторного включения их.  Смотрите L<perldebug>.

=head3 Точки останова с именами файлов

Команда отладчика "b" для установки точки останова теперь позволяет
указывать префиксом к номеру строки имя файла. Смотрите
L<perldebug/"b [file]:[line] [condition]">.

=head2 Пространство имён C<CORE>

=head3 Префикс C<CORE::>

Префикс C<CORE::> теперь может быть использован в ключевых словах
подключаемых через L<feature.pm|feature> даже вне контекста C<use feature>.

=head3 Подпрограммы в пространстве имён C<CORE>

Многие ключевые слова Perl теперь доступны как подпрограммы в пространстве
имён CORE. Это позволяет задавать для них псевдонимы:

    BEGIN { *entangle = \&CORE::tie }
    entangle $variable, $package, @args;

и для обхода прототипов:

    sub mytie(\[%$*@]$@) {
	my ($ref, $pack, @args) = @_;
	... do something ...
	goto &CORE::tie;
    }

Некоторые из них не могут быть вызваны через ссылки или через C<&foo>
синтаксис и должны вызываться только как bareword

Смотрите подробности в L<CORE>.

=head2 Другие изменения

=head3 Анонимные дескрипторы

Автоматически генерируемые файловые дескрипторы теперь именуются
__ANONIO__, когда имя переменной не может быть определено лучше
чем $__ANONIO__.

=head3 Автозагружаемые подпрограммы сортировки

Пользовательские подпрограммы сортировки теперь могут быть
автоматически загружены [perl #30661]:

    sub AUTOLOAD { ... }
    @sorted = sort foo @list; # uses AUTOLOAD

=head3 C<continue> больше не требует подключения "switch" функционала

Ключевое слово  C<continue> имеет два смысла. Оно может представлять
C<continue> блок после цикла или может использоваться для выхода из
текущего блока C<when>. До этого момента, последний смысл был
допустимым только при включения функционала "switch", и являлось
синтаксической ошибкой в противном случае.  Поскольку основное
назначение модуля feature.pm - это избежание конфликтов с определёнными
пользователем именами подпрограммам, никаких причин для C<continue>
зависеть от него нет.

=head3 Замеры DTrace при изменении фазы интерпретатора

Замеры C<phase-change> стартуют когда происходит смена фазы
интерпретатора, которая отслеживается в переменной C<${^GLOBAL_PHASE}>.
C<arg0> - это новое имя фазы; C<arg1> - старое имя фазы.  Это полезно
в основном для ограничения набора вашего инструментария одним или
несколькими частями: время компиляции, время работы, время уничтожения.

=head3 Синтаксис C<__FILE__()>

Лексемы C<__FILE__>, C<__LINE__> и C<__PACKAGE__> теперь могут быть
записаны с пустой парой скобок после них.  Это делает возможным парсинг
тем же образом, что и C<time>, C<fork> и другие встроенные функции.

=head3 Прототип C<\$> принимает любое скалярное lvalue

Прототипы подпрограмм C<\$> и C<\[$]> теперь принимают любой скалярный
lvalue аргумент.  Раньше они принимали только скаляры начинающиеся с C<$>
и элементы хэша и массива.  Это изменение согласовывает их поведение с
встроенными C<read> и C<recv> функциями при разборе их аргументов.  Это
означает, что можно переопределить встроенные функции пользовательской
подпрограммой, которая тем же образом разбирает свои аргументы.

=head3 C<_> в прототипах подпрограмм

Символ C<_> в прототипах подпрограмм теперь разрешён перед C<@> или C<%>.

=head1 Безопасность

=head2 Используйте C<is_utf8_char_buf()> вместо C<is_utf8_char()>

Первая функция теперь является устаревшей, поскольку её API недостаточен
для гарантии того, что она не прочитает (до 12 байт в худшем случае) за
пределами входной строки. Смотрите
L<is_utf8_char_buf()|/Added is_utf8_char_buf()>.

=head2 Искажённый UTF-8 ввод может привести к попыткам чтения за пределами буфера

Две новые XS-доступные функции, C<utf8_to_uvchr_buf()> и
C<utf8_to_uvuni_buf()> теперь доступны для предотвращения этого и ядро
Perl уже перешло на их использование.
Смотрите L</Внутренние Изменения>.

=head2 C<File::Glob::bsd_glob()> ошибка памяти с GLOB_ALTDIRFUNC (CVE-2011-2728).

Вызов C<File::Glob::bsd_glob> с не поддерживаемым флагом GLOB_ALTDIRFUNC
может привести нарушению доступа / сегфолту.  Perl программа, которая
получает значение флагов из внешнего источника может быть подвержена атакам
на отказ в обслуживании или выполнения произвольного кода.  Пока не известно
о существовании действующих эксплойтов.  Проблема была исправлена явным
запретом всех не поддерживаемых флагов и установкой незадействованных
указателей функций в null.  О баге сообщил Clément Lecigne.

=head2 Теперь привилегии выставляются коректно при присваивании C<$(>

Был исправлен гипотетический баг (вероятно невозможный для применения
на практике) вследствие некорректной установки ID эффективной группы
при задании C<$(>.  Баг возможен только на системах, которые имеют
C<setresgid()>, но не имеют C<setregid()>, но ни об одной такой системе
нам неизвестно.

=head1 Устаревшее

=head2 Не читайте файлы данных Юникода в F<lib/unicore>

Теперь прямое обращение к файлам данных Юникода не рекомендуется. Они
хранятся в каталоге F<lib/unicore>.  Вместо этого вы должны использовать
новые функции в L<Unicode::UCD>.  Они предоставляют стабильное API и
дают исчерпывающую информацию.

Perl может с какого-то момента в будущем изменить или удалить данные
файлы. Вероятно наиболее используемым файлом был
F<lib/unicore/ToDigit.pl>. Вместо этого можно использовать функцию
L<Unicode::UCD/prop_invmap()> для получения этих данных.

=head2 XS функции C<is_utf8_char()>, C<utf8_to_uvchr()> и
C<utf8_to_uvuni()>

Эта функция не рекомендуется, поскольку она может попытаться прочитать
данные за пределами входной строки.  Используйте вместо них новые функции
L<is_utf8_char_buf()|/Добавлена is_utf8_char_buf()>, C<utf8_to_uvchr_buf()>
и C<utf8_to_uvuni_buf()>.

=head1 Устаревающий Функционал

Эта секция служит для уведомления о функционале, который I<вероятно> будет
удалён или L<устареет|perlpolicy/deprecated> в следующем релизе perl
(5.18.0).  Если ваш код зависит от этого функционала, вы должны
связаться с Perl 5 Porters через
L<список рассылки|http://lists.perl.org/list/perl5-porters.html> или
L<perlbug> для того, чтобы объяснить ваш конкретный случай и информировать
процесс отказа.

=head2 Базовые Модули

Эти модули могут быть помечены как устаревшие I<из ядра>.  Это всего лишь
означает, что они больше не будут устанавливаться по умолчанию с базовым
дистрибутивом, но по прежнему будут доступны на CPAN.

=over

=item *

CPANPLUS

=item *

Filter::Simple

=item *

PerlIO::mmap

=item *

Pod::Parser, Pod::LaTeX

=item *

SelfLoader

=item *

Text::Soundex

=item *

Thread.pm

=back

=head2 Платформы, для которых нет поддерживающих программистов:

Поддержка сборки для этих платформ вероятно будет удалена в
ветке разработки 5.17.0.

=over

=item *

BeOS

=item *

djgpp

=item *

dgux

=item *

EPOC

=item *

MPE/iX

=item *

Rhapsody

=item *

UTS

=item *

VM/ESA

=back

=head2 Прочий устаревающий Функционал

=over

=item *

Обмен $< и $>

Для большей информации об устаревании этого функционала смотрите
L<относящийся к проблеме баг в RT|https://rt.perl.org/rt3/Ticket/Display.html?id=96212>.

=item *

sfio, stdio

=item *

Не экранированный литерал C<< "{" >> в регулярном выражении.

Запланировано, начиная с v5.20, требовать экранирование литерала  C<"{">,
например, предшествующим символом обратного слэша. В v5.18 будет выводиться
предупреждение для всех подобных случаев.  Следует отметить, что это касается
только случаев когда в шаблоне ищутся совпадения с литералом C<"{">.
Другие виды использования этого символа, такие как часть квантора или
последовательности, приведённые ниже, не затронуты этим изменением:

    /foo{3,5}/
    /\p{Alphabetic}/
    /\N{DIGIT ZERO}

Удаление этого позволит делать расширения для синтаксиса шаблонов и лучше
делать проверки на ошибки в существующем синтаксисе.  Смотрите
L<perlre/Quantifiers> для примера.

=back

=head1 Несовместимые изменения

=head2 Специальные блоки вызываются в пустом контексте

Специальные блоки (C<BEGIN>, C<CHECK>, C<INIT>, C<UNITCHECK>, C<END>) теперь
вызываются в пустом контексте.  Это позволяет избежать расточительного
копирования результатов последнего оператора [perl #108794].

=head2 Прагма C<overloading> и объекты regexp

С C<no overloading>, объекты регулярного выражения возвращаемые C<qr//>
теперь преобразуются к строке вида "Regexp=REGEXP(0xbe600d)" вместо
самого регулярного выражения [perl #108780].

=head2 Удалены две записи XS typemap 

Две, предположительно неиспользуемые, XS typemap записи были удалены
из базовых typemap: T_DATAUNIT и T_CALLBACK. Если вы против изменений,
пользователь этих typemap, пожалуйста смотрите инструкцию о том как
вернуть их в L<perlxstypemap>.

=head2 Юникод 6.1 имеет несовместимости с Юникод 6.0

Они детально описаны в L</Поддержка (почти) Юникода 6.1> выше.
Вы можете скомпилировать эту версию Perl для работы с Юникод 6.0.
Смотрите
L<perluniprops/Unicode character properties that are NOT accepted by Perl>.

=head2 Компилятор Borland

Вся поддержка компилятора Borland была выкинута. В любом случае этот код
не работал уже достаточно долгое время.

=head2 Некоторые устаревшие свойства в Юникоде больше не поддерживается

Perl никогда не раскрывает некоторые свойства Юникода, которые
используются в Юникоде для внутренних целей и не предполагают публичной
доступности.  Использование их приводило к генерации сообщения
предупреждения начиная с Perl 5.12.  Удалены следующие свойства
Other_Alphabetic, Other_Default_Ignorable_Code_Point, Other_Grapheme_Extend,
Other_ID_Continue, Other_ID_Start, Other_Lowercase, Other_Math, и
Other_Uppercase.

Perl может быть пересобран для включения любой из них; инструкции
даны в 
L<perluniprops/Unicode character properties that are NOT accepted by Perl>.

=head2 Разыменование IO сущностей как typeglob'ов

Оператор C<*{...}> при передаче ссылки на IO сущность (как
C<*{*STDIN{IO}}>), создаёт новый typeglob содержащий только это IO объект.
Ранее, он приводил в строковой вид как пустую строку, но некоторые
операторы могли их воспринимать как неопределённое значение, выдавая
предупреждение о не инициализированном значении.
Теперь это приводится к строке вида __ANONIO__ [perl #96326].

=head2 Определённые пользователем операции изменяющие регистр

Этот функционал являлся устаревшим в Perl 5.14 и сейчас был удалён.
Модуль CPAN L<Unicode::Casing> предоставляет лучшую функциональность
без недостатков, которые были свойствены этому функционалу, изложенные
в документации 5.14:
L<http://perldoc.perl.org/5.14.0/perlunicode.html#User-Defined-Case-Mappings-%28for-serious-hackers-only%29>

=head2 XSUB'ы теперь статические

XSUB C функции теперь статические (static), т.е. они не видимы за
пределами скомпилированного модуля.  Пользователи теперь могут
использовать новые макросы C<XS_EXTERNAL(name)> и C<XS_INTERNAL(name)>
для выбора предпочитаемого поведения линкера. Обычная декларация
C<XS(name)> для XSUB по прежнему создаёт нестатические XSUBs для
совместимости, но XS компилятор, C<ExtUtils::ParseXS> (C<xsubpp>)
будет создавать статические XSUB по умолчанию. Поведение
C<ExtUtils::ParseXS> может быть изменено из XS, используя ключевое
слово C<EXPORT_XSUB_SYMBOLS>.  Смотрите детали в L<perlxs>.

=head2 Ослабление (weakening) доступной только на чтение ссылки

Ослабление (weakening) доступной только на чтение ссылки больше не
позволяется.  Это в любом случае не работало, а в некоторых случаях
приводило к краху.

=head2 Связывание скаляров, которые содержат typeglob'ы

Попытка связать скаляр после того, как ему был присвоен typeglob,
вместо этого связывала дескриптор в IO слоте typelglob'а.  Это означало,
что было невозможно связать непосредственно сам скаляр.  Схожие
проблемы затрагивают и C<tied> C<untie>: C<tied $scalar> будет
возвращать ложь на связанные скаляры, если последний возвращённый объект
был typeglob'ом, и C<untie $scalar> на таком связанном скаляре не будет
делать ничего.

Мы исправили эту проблему до Perl 5.14.0, но это вызвало проблемы с
некоторыми модулями CPAN, поэтому мы поместили это изменение в цикл
устаревания.

Теперь статус устаревшего был удален и это баг был окончательно исправлен.
Т.о. C<tie $scalar> теперь всегда связывает сам скаляр, но не
содержащийся в нём дескриптор. Для связывания дескриптора используйте
C<tie *$scalar> (с явным указанием звёздочки).  Тоже самое относится к
C<tied *$scalar> и C<untie *$scalar>.

=head2 IPC::Open3 больше не предоставляет C<xfork()>, C<xclose_on_exec()>
и C<xpipe_anon()>

Все три функции были приватными, недокументированными и неэкспортируемыми.
Они не использовались в каком-либо коде на CPAN. Две из них были встроены
в код, а одна удалена полностью.

=head2 C<$$> больше не кэширует значение PID

Раньше при вызове fork(3) из C, значение C<$$> в Perl приходило в
рассинхронизацию с тем, что возвращал getpid(). Всегда получая значение
C<$$> через вызов getpid(), этот баг был исправлен. Код, который зависел
от кэширующего поведения теперь сломается.  Как описано в
L<Улучшения Ядра|/C<$$> можно присваивать значения>, C<$$> доступна для
записи, но будет сброшена при fork.

=head2 C<$$> и C<getppid()> больше не эмулируют POSIX семантику в LinuxThreads

Эмуляция POSIX C<$$> и C<getppid()> в вышедшей из употребления
реализации LinuxThreads была удалена.
Это касается только пользователей Linux 2.4 и пользователей
Debian GNU/kFreeBSD до версии 6.0 включительно, но не обширное
множество инсталляций Linux, которые используют NPTL нити.

Это означает, что C<getppid()>, как и C<$$>, теперь всегда гарантируют,
что возвращается мнение ОС о текущем состоянии процесса, а не кэшированый
в perl вариант этого мнения.

Смотрите документацию по L<$$|perlvar/$$> для подробностей.

=head2 C<< $< >>, C<< $> >>, C<$(> и C<$)> теперь больше не кэшируются

Схожее с изменениями C<$$> и C<getppid()>, внутреннее кэширование
C<< $< >>, C<< $> >>, C<$(> и C<$)> было удалено.

Когда мы закэшировали эти значения, наше представление о том, чему они
равны, могут разойтись с реальностью, если кто-либо (например,
встраивающий perl) вызовет C<sete?[ug]id()> без обновления
C<PL_e?[ug]id>. Цена учёта такой сложности не сопоставима с дешёвым
системным вызовом C<gete?[ug]id()>.

Это изменение сломает горстку модулей на CPAN, которые используют
переменные XS-уровня C<PL_uid>, C<PL_gid>, C<PL_euid> или C<PL_egid>

Исправлением для этих разломов является использование функции
C<PerlProc_gete?[ug]id()> для получения их значения (например,
C<PerlProc_getuid()>), и не присваивать значение C<PL_e?[ug]id>,
если вы хотите сменить UID/GID/EUID/EGID.  Теперь нет необходимости
делать это, так как perl всегда получает актуальные значения из ОС.

=head2 Изменился список не-ASCII символов, которые квотятся C<quotemeta> и C<\Q>

Это вряд ли приведёт к каким-то реальным проблемам, т.е. Perl не
придаёт специального значения для не-ASCII символов, поэтому не важно
какие из них квотятся, а какие нет.  Это изменение исправляет баг
[perl #77654] и делает поведение Perl более соответствующим рекомендациям
Юникода.
Смотрите L<perlfunc/quotemeta>.

=head1 Увеличение Производительности

=over

=item *

Улучшена производительность для свойств Юникода в регулярных выражениях

=for comment Может ли это быть как-то сокращено? -- rjbs, 2012-02-20

Поиск совпадений для свойств Юникода теперь производится через бинарный
поиск вместо линейного.  Это означает, что например в худшем случае поиск
1000-го свойства потребует 10 проб вместо 1000. Эта неэффективность в
прошлом была скомпенсирована постоянным хранением в хэше результата поиска
плюс результат соседних 64 кодов, в предположении, что чаще ищутся коды
расположенные рядом. Отдельный хэш использовался для каждого упоминания
свойства Юникод в каждом регулярном выражении. Таким образом
C<qr/\p{foo}abc\p{foo}/> создаст два хэша. Любой поиск в каждом случае
будет оставаться неизвестным для других и хэши будут расширяться
независимо до внушительных размеров в случае если регулярное выражение
использовалось для большого количества кодов в широком диапазоне.  В
экстремальных ситуациях это может привести к израсходованию доступной
памяти. Теперь, однако, есть только один хэш доступный всем экземплярам
данного свойства.  Это значит, что если C<\p{foo}> совпадает с "A" в
одном регулярном выражении в нити, результат станет известен немедленно
во всех регулярных выражениях и потребление памяти заметно сократится.

=item *

Определение версии с ключевым словом C<use> (например, C<use 5.012>)
теперь работает быстрее, так как включает функционал без загрузки
F<feature.pm>.

=item *

C<local $_> теперь быстрее, так как больше не проходит через магию,
которая в любом случае не приводит к копированию.

=item *

Perl 5.12.0 ускорил уничтожение объектов, чьи классы задавали пустые
C<DESTROY> методы (для предотвращения автозагрузки), просто не
запуская эти пустые методы.  Этот релиз продвигает эту оптимизацию
на шаг вперёд не вызывая любой C<DESTROY> метод, который начинается с
оператора C<return>. Это может быть полезно для деструкторов, которые
используются только для отладки:

    use constant DEBUG => 1;
    sub DESTROY { return unless DEBUG; ... }

Вычисление константы сократит первый оператор до C<return;> если DEBUG
будет установлен в 0, тем самым приводя к выполнению оптимизации.

=item *

Присвоение переменной, которая содержит typeglob или скаляр
копируемый при записи, теперь происходит гораздо быстрей.  Раньше
typeglob приводился к строке, а скаляр копируемый при записи
копировался перед изменением.

=item *

Присвоение C<substr> в пустом контексте теперь происходит в два раза
быстрее.  Вместо создания и возвращения специального lvalue скаляра,
к которому будет присваиваться результат, C<substr> изменяет саму
оригинальную строку.

=item *

C<substr> больше не вычисляет значение, которое должен вернуть, когда
вызывается в пустом контексте.

=item *

Из-за изменений в L<File::Glob>, функция Perl C<glob> и её C<< <...> >> 
эквивалент теперь значительно быстрее.  Разбитие шаблона на слова было
переписано на C, приведя к 20% ускорению в некоторых случаях.

Это не затрагивает C<glob> на VMS, т.к. там не используется File::Glob.

=item *
Укороченные логические операторы C<&&>, C<||>, и C<//>, при связке в
цепочку (как например C<$a || $b || $c>), теперь работают значительно
быстрее, вследствие укороченного обхода дерева операций.

=item *

Реализация C<s///r> делает ещё одну копию значения скаляра.

=item *

C<study> теперь ни делает ничего (no-op).

=item *

Рекурсивный вызов к lvalue подпрограмме в lvalue скалярном контексте
использует меньше памяти.

=back

=head1 Модули и Прагмы

=head2 Устаревшие Модули

=over

=item L<Version::Requirements>

Version::Requirements теперь устарел, используйте
L<CPAN::Meta::Requirements>, который является подходящей заменой. Он
будет удалён из perl.git blead в версии v5.17.0.

=back

=head2 Новые Модули и Прагмы

=over 4

=item *

L<arybase> -- этот новый модуль является реализация переменной C<$[>.

=item *

C<PerlIO::mmap> 0.010 был добавлен в базовый Perl.

Слой C<mmap> PerlIO больше не предоставляется самим perl, а был вынесен
в новый модуль L<PerlIO::mmap>.

=back

=head2 Обновлённые Модули и Прагмы

=over 4

=item *

L<XXX> был обновлён с версии 0.69 до версии 0.70.

=back

=head2 Удалённые Модули и Прагмы

Как и было обещано в заметках к выпуску Perl 5.14.0, следующие модули
были удалены из базового дистрибутива и при необходимости могут быть
установлены из CPAN.

=over

=item *

C<Devel::DProf> был удалён из базового Perl.  Предыдущая версия была
20110228.00.

=item *

C<Shell> был удалён из базового Perl.  Предыдущая версия была 0.72_01.

=back

=head1 Документация

=head2 Новая Документация

=head3 L<perldtrace>

L<perldtrace> описывает поддержку DTrace в Perl, описывает доступные пробы
и даёт примеры их использования.

=head3 L<perlexperiment>

Этот документ предназначен предоставлять список экспериментального
функционала в Perl.  Работа над ним по-прежнему продолжается.

=head3 L<perlootut>

Новое пособие по ООП.  Оно сфокусировано на базовых концепциях ООП и
позже рекомендует читателям выбрать ООП фреймворка со CPAN.

=head3 L<perlxstypemap>

Новое руководство описывает механизм соответствия типов в XS в
беспрецедентных деталях и комбинирует новую документацию с информацией
извлечённой из L<perlxs> и ранее неофициальный список всех базовых
typemap.

=head2 Изменения в Существующей Документации

=head3 L<perlapi>

=over 4

=item *

HV API давно принимало отрицательную длину для обозначения того, что
ключ в UTF8.  Теперь это задокументировано. 

=item *

Макрос C<boolSV()> теперь задокументирован.

=back

=head3 L<perlfunc>

=over 4

=item *

C<dbmopen> трактует режим 0 как особый случай, который предотвращает
создание несуществующего файла.  Это было так начиная с Perl 5.000, но
нигде не было задокументировано.  Теперь раздел perlfunc упоминает об
этом [perl #90064].

=item *

Совершенно случайно, C<open $fh, "<:", ...> применяет слой по-умолчанию
для платформ (C<:raw> на Unix, C<:crlf> на Windows), игнорируя то, что
было задано в L<open.pm|open>.  Это оказалось настолько полезным, что
было задокументировано в L<perlfunc|perlfunc/open> и L<open>.

=item *

Описание C<split> было переписано.  Теперь оно более внятное чем раньше.

=back

=head3 L<perlguts>

=over 4

=item *

Была добавлена новая секция
L<Автозагрузка с XSUB'ами|perlguts/Autoloading with XSUBs>, которая
объясняет два API для доступа к именам авто-загруженных процедур.

=item *

Некоторые описания функций в L<perlguts> были смущающими, так как не
было ясно относятся ли они к функции выше или ниже описания.  Это
было прояснено [perl #91790].

=back

=head3 L<perlobj>

=over 4

=item *

Этот документ был переписан с нуля, и его охват различных концепций ООП
был расширен.

=back

=head3 L<perlop>

=over 4

=item *

Документация оператора умного сопоставления (smartmatch) была
переработана и перемещена из perlsyn в perlop, которому он принадлежит.

Также была исправлена документация для случая C<undef> с левой стороны.
Список различного поведения умного сопоставления имел раздел не в том
месте.

=item *

Документация оператора многоточия (C<...>) была переработана и
перемещена из perlop в perlsyn.

=item *

Объяснение битовых операторов было расширено на описание того, как они
работают Юникод строками (5.14.1).

=item *

Было добавлено больше примеров для C<m//g> (5.14.1).

=item *

Синтаксис встроенной документации C<<< <<\FOO >>> был
задокументирован (5.14.1)

=back

=head3 L<perlpragma>

=over 4

=item *

Теперь есть стандартное соглашения для именования ключей в C<%^H>,
задокументированное в L<Именование ключей|perlpragma/Key naming>.

=back

=head3 L<perlsec/Laundering and Detecting Tainted Data>

=over 4

=item *

Функция в примере для проверки на taint содержала едва заметную
ошибку.  Для C<$@> требовалось быть локализованной, что избежать
изменения её глобального значения.  Предпочитаемый метод для
проверки для этого остаётся L<Scalar::Util/tainted>.

=back

=head3 L<perllol>

=over

=item *

L<perllol> был расширен примерами использующих новый C<push $scalar>
синтаксис, введённый в Perl 5.14.0 (5.14.1).

=back

=head3 L<perlmod>

=over

=item *

L<perlmod> теперь точно формулирует, что некоторые типы явных манипуляций с
таблицей символов не поддерживаются.  Это систематизирует то, что уже было
фактом [perl #78074].

=back

=head3 L<perlpodstyle>

=over 4

=item *

Были поправлены и широко дополнены советы о том, какие использовать
форматирующие коды.

=item *

Теперь появились несколько примеров однострочников для предпросмотра
POD файлов после того как они были отредактированы.

=back

=head3 L<perlre>

=over

=item *

Директива C<(*COMMIT)> теперь перечислена в нужной секции
(L<Глаголы без аргумента|perlre/Verbs without an argument>).

=back

=head3 L<perlrun>

=over

=item *

L<perlrun> подвергся значительной чистке.  Особенно,
B<-0x...> форма B<-0> флага была пояснена и финальная секция об
переменных окружения была исправлена и расширена (5.14.1).

=back

=head3 L<perlsub>

=over

=item *

Синтаксис прототипа ($;), который существовал достаточно долгое время,
теперь задокументирован в L<perlsub>. Он позволяет унарным функциям
иметь такой же приоритет операции, что и оператор списка.

=back

=head3 L<perltie>

=over

=item *

Требуемый синтаксис для связанных дескрипторов был задокументирован.

=back

=head3 L<perlvar>

=over

=item *

Документация для L<$!|perlvar/$!> была исправлена и разъяснена. Было
сформулировано, что $! может быть C<undef>, что не так. Также было неясно
что устанавливает системный вызов: C<errno> в C или C<$!> в Perl
[perl #91614].

=item *

Документация для L<$$|perlvar/$$> была поправлена с дополнительными
предостережениями, касающиеся изменения ID процесса.

=back

=head3 Другие изменения

=over 4

=item *

L<perlxs> был расширен документаций о встраиваемых typemap'ах.

=item *

L<perlref> получил новую секцию
L<Циклические Ссылки|perlref/Circular References>, которая объясняет
как такие циклы могут не освобождаться и как решать это с помощью
слабых ссылок.

=item *

Части L<perlapi> были прояснены и Perl эквиваленты некоторых
C функций были добавлены как дополнительный способ объяснения.

=item *

Некоторые разделы L<perlre> и L<perlrecharclass> были улучшены.

=back

=head2 Удалённая Документация

=head3 Старая ООП Документация

Вся старые ООП пособия, perltoot, perltooc, и perlboot были удалены.
perlbot (набор рецептов по объектов) также был удалён.

=head3 Дельты Разработки

Файлы perldelta для выпусков для разработчиков больше не пакуются с perl.
Они по-прежнему могут быть найдены в репозитории исходного кода.

=head1 Диагностика

Следующие дополнения или изменения были сделаны с диагностическим
выводом, включая предупреждения и сообщения о фатальных ошибках. Для
полного списка диагностических сообщений смотрите L<perldiag>.

=head2 Новая диагностика

=head3 Новые Ошибки

=over 4

=item *

L<Cannot set tied @DB::args|perldiag/"Cannot set tied @DB::args">

Эта ошибка возникает, когда C<caller> пытается установить C<@DB::args>,
но обнаруживает, что тот связанный.  Раньше, до добавления этой ошибки,
он просто падал.

=item *

L<Cannot tie unreifiable array|perldiag/"Cannot tie unreifiable array">

Эта ошибка часть проверки на безопасность, которую оператор C<tie>
выполняет перед связыванием специальный массивов типа C<@_>.  Вы никогда
не должны увидеть это сообщение.

=item *

L<&CORE::%s cannot be called directly|perldiag/"&CORE::%s cannot be called directly">

Это происходит, когда подпрограмма из пространства имён C<CORE::>
вызывается с использованием синтаксиса C<&foo> или через ссылку.
Некоторые подпрограммы в этом пакете не могут пока вызываться таким
образом и должны вызываться как bareword. Смотрите
L</Подпрограммы в пространстве имён C<CORE>> выше.

=item *

L<Source filters apply only to byte streams|perldiag/"Source filters apply only to byte streams">

Эта новая ошибка возникает, когда вы пытаетесь активировать фильтр
исходного кода (обычно при загрузке модуля фильтра кода) со строкой
переданной в C<eval> во время действия функционала C<unicode_eval>.

=back

=head3 Новые Предупреждения

=over 4

=item *

L<defined(@array) is deprecated|perldiag/"defined(@array) is deprecated">

Давно устаревший C<defined(@array)> теперь также выдаёт предупреждения для
переменных пакета.  Ранее предупреждение выдавалось только для лексических
переменных.

=item *

L<length() used on %s|perldiag/length() used on %s>

Это новое предупреждение возникает, когда C<length> используется на массивах
или хэшах, вместо C<scalar(@array)> или C<scalar(keys %hash)>.

=item *

L<lvalue attribute %s already-defined subroutine|perldiag/"lvalue attribute %s already-defined subroutine">

L<attributes.pm|attributes> теперь выводит предупреждение, когда атрибут
:lvalue применяется к Perl подпрограмме, которая уже была определена и
выполнение этой операции может привести к непредсказуемым побочным эффектам.

=item *

L<overload arg '%s' is invalid|perldiag/"overload arg '%s' is invalid">

This warning, in the "overload" category, is produced when the overload
pragma is given an argument it doesn't recognize, presumably a mistyped
operator.

=item *

L<$[ used in %s (did you mean $] ?)|perldiag/"$[ used in %s (did you mean $] ?)">

Это новое предупреждение предназначено отлавливать ошибочное использование
C<$[> в проверках версии. C<$]>, а не C<$[> содержит значение версии.

=item *

L<Useless assignment to a temporary|perldiag/"Useless assignment to a temporary">

Присвоение временному скаляру, возвращаемому из lvalue подпрограммы,
теперь выводит это предупреждение [perl #31946].

=item *

L<Useless use of \E|perldiag/"Useless use of \E">

C<\E> ни делает ничего, если не предварён C<\Q>, C<\L> или C<\U>.

=back

=head2 Удалённые Ошибки

=over

=item *

"sort is now a reserved word"

Эта ошибка использовалась, когда sort вызывался без аргументов с
последующими символами C<;> или C<)>. (Например, C<sort;> умрёт,
а C<{sort}> нет).  Это сообщение об ошибке было добавлено в Perl 3
для выявления кода, типа C<close(sort)>, который больше не работает.
Два десятка лет спустя, это сообщение больше неуместно. Теперь C<sort>
без аргументов всегда допустим и возвращает пустой список, как он
это и делал в подобных случаях, в которых он уже был разрешён
[perl #90030].

=back

=head2 Изменения в Существующей Диагностике

=over 4

=item *

"Applying pattern match..." или подобные предупреждения вызываемые,
когда массив или хэш находится по левую сторону оператора C<=~>,
теперь упоминают имя переменной.

=item *

В сообщении "Attempt to free non-existent shared string" было
исправлено написание "non-existent" как "nonexistent".  Это было
уже исправлено в описании в L<perldiag>.

=item *

Сообщение об ошибке при использовании C<default> и C<when> вне
блока было стандартизовано для соответствия сообщениям для C<continue>
и управляющих циклом.  Теперь они читаются 'Can't "default" outside a
topicalizer' и 'Can't "when" outside a topicalizer'.  Ранее они оба 
имели вид 'Can't use when() outside a topicalizer' [perl #91514].

=item *

Сообщение "Code point 0x%X is not Unicode, no properties match it;
all inverse properties do" было изменено на "Code point 0x%X is not
Unicode, all \p{} matches fail; all \P{} matches succeed".

=item *

Предупреждения о переопределении для постоянных подпрограмм было
обязательным, и происходили даже при C<no warnings>.  Теперь они
соблюдают требования прагмы L<warnings>. 

=item *

Предупреждение "glob failed" теперь подавляется при C<no warnings>
[perl #111656].

=item *

Сообщение об ошибке
L<Invalid version format|perldiag/"Invalid version format (%s)">
теперь говорит о "negative version number" (отрицательный номер версии)
в скобках, вместо "non-numeric data" (не числовые данные) для
отрицательных чисел.

=item *

Два предупреждения
L<Possible attempt to put comments in qw() list|perldiag/"Possible attempt to put comments in qw() list">
и
L<Possible attempt to separate words with commas|perldiag/"Possible attempt to separate words with commas">
больше не взаимоисключающие: один и тот же C<qw> может вывести оба.

=item *

Предупреждение о не инициализированном значении для C<y///r>, когда C<$_>
используется неявно и неопределенно, теперь упоминает имя переменной,
также как и для вариант оператора без /r .

=item *

Предупреждение 'Use of "foo" without parentheses is ambiguous' (
Использование "foo" без скобок двусмысленно) было расширенно для
случая пользовательских подпрограмм с прототипом (;$), а не только
встроенных функций.

=item *

Предупреждения, в которых упоминаются лексических переменных (C<my>) с
символами Юникода учитывают наличие или отсутствие слоя C<:utf8> на
дескрипторе вывода вместо вывода в UTF8, не обращая на это внимание.
Также правильные имена включаются в строки передаваемые в
дескрипторы C<$SIG{__WARN__}>, вместо необработанных UTF8 байтов.

=back

=head1 Изменения в Утилитах

=head3 L<h2ph>

=over 4

=item *

L<h2ph> генерировал код в следующей форме

  unless(defined(&FOO)) {
    sub FOO () {42;}
  }

Но объявление подпрограмм происходит при компиляции и поэтому условие
на это не влияет.  Теперь это было исправлено заключением подпрограммы
в блок C<eval> [perl #99368].

=back

=head3 L<splain>

=over 4

=item *

F<splain> больше не выводит трассировки с повторяющейся первой строкой.

Было:

    Uncaught exception from user code:
            Cannot fwiddle the fwuddle at -e line 1.
     at -e line 1
            main::baz() called at -e line 1
            main::bar() called at -e line 1
            main::foo() called at -e line 1

Стало:

    Uncaught exception from user code:
            Cannot fwiddle the fwuddle at -e line 1.
            main::baz() called at -e line 1
            main::bar() called at -e line 1
            main::foo() called at -e line 1

=item *

Некоторые сообщения об ошибках состоявшие из нескольких строк
указаны в разных разделах в L<perldiag>. splain пытался найти отельный
раздел, включающий все строки, вместо того, чтобы просто найти
сообщение.

=back

=head3 L<zipdetails>

=over 4

=item *

Это новая утилита, включённая как часть обновления L<IO::Compress::Base>

L<zipdetails> показывает информацию о внутренней структуре записи zip
файла.  Она не имеет отношения к деталям сжатых данных, сохранённых в
zip файле.

=back

=head1 Конфигурация и Компиляция

=over 4

=item *

F<regexp.h> был модифицирован для совместимости с опцией B<-Werror> GCC,
используемый некоторыми проектами, которые включают заголовочные файлы
perl (5.14.1)

=item *

C<USE_LOCALE{,_COLLATE,_CTYPE,_NUMERIC}> были добавлены в вывод perl -V
так как они влияют на поведение исполняемого файла интерпретатора (хотя
только в небольших областях).

=item *

Код и тесты для L<IPC::Open2> были перенесены из F<ext/IPC-Open2> в
F<ext/IPC-Open3>, так как C<IPC::Open2::open2()> реализована как тонкая
обёртка вокруг C<IPC::Open3::_open3()> и следовательно очень тесно связана
с ней.

=item *

Магические типы и магические vtables теперь генерируются из данных в новом
скрипте F<regen/mg_vtable.pl>, вместо того, чтобы сопровождаться в ручную.
Так как различные варианты EBCDIC не согласуются с кодом для '~',
конвертирование символа в код производится во время сборки F<generate_uudmap>
в новые генерируемые заголовок F<mg_data.h>. C<PL_vtbl_bm> и C<PL_vtbl_fm>
теперь определены пре-процессором как C<PL_vtbl_regexp>, вместо того, чтобы
быть объявленными явными C переменными. C<PL_vtbl_sig> был удалён.

=item *

Сборка с C<-DPERL_GLOBAL_STRUCT> снова работает.  Эта конфигурация не очень
часто используется.

=item *

Perl, сконфигурированный с I<MAD> теперь корректно освобождает структуры
C<MADPROP>, когда освобождается OPs.  C<MADPROP>'ы теперь расположены с
C<PerlMemShared_malloc()>

=item *

Был переработан F<makedef.pl>.  Это не даст заметных эффектов на любых
платформах, которые используют его как часть сборки (AIX, VMS, Win32).

=item *

C<useperlio> больше не может быть отключён.

=item *

Файл F<global.sym> больше не нужен и был удалён. Он содержал список
всех экспортируемых функций, один из файлов генерируемых
F<regen/embed.pl> из данных в F<embed.fnc> и F<regen/opcodes>.  Код
был переделан так, что только пользователи F<global.sym>, F<makedef.pl>,
теперь читают F<embed.fnc> и F<regen/opcodes> напрямую, устраняя
необходимость хранить список экспортируемых функций в файле посреднике.

Так как F<global.sym> никогда не устанавливался, это изменение не будет
заметно вне сборочного процесса.

=item *

F<pod/buildtoc>, использовавшийся в процессе сборки для сборки
L<perltoc>, был переделан и упрощён.  Теперь он содержит только код для
сборки L<perltoc>; код для регенерации Makefile'ов был перемещён в
F<Porting/pod_rules.pl>.  Это баг, если это изменение может иметь
любые материальные эффекты на сборочный процесс.

=item *

F<pod/roffitall> теперь собирается для F<pod/buildtoc>, вместо того,
чтобы включаться в дистрибутив. Список его man-страниц теперь
генерируется (а значит они актуальны). Смотрите также RT #103202 для
схожей нерешённой проблемы.

=item *

Man-страница для C<XS::Typemap> больше не устанавливается.
C<XS::Typemap> - это тестовый модуль, который не устанавливается, а
значит установка его документации не имеет смысла.

=item *

Опции -Dusesitecustomize и -Duserelocatableinc теперь работают вместе
правильно.

=back

=head1 Поддержка Платформ

=head2 Платформо-специфичные Заметки

=head3 Cygwin

=over 4

=item *

Начиная с версии 1.7, Cygwin поддерживает родные UTF-8 пути. Если Perl
собран в этом окружении, имена директорий и файлов будут кодированные в
UTF-8.

Cygwin не инициализирует все оригинальные переменные окружения Win32.
Смотрите F<README.cygwin> обсуждение новой добавленной функции
C<Cygwin::sync_winenv()> [perl #110190] и дальнейшие ссылки.

=back

=head3 HP-UX

=over 4

=item *

HP-UX PA-RISC/64 теперь поддерживает gcc-4.x

Исправление для исправления socketsize теперь делает прохождение набора
тестов успешным на HP-UX PA-RISC для 64bitall сборок.

=back

=head3 VMS

=over 4

=item *

Удалены ненужные включения, исправлены различные предупреждения
компилятора и закрыты незакрытые комментарии в F<vms/vms.c>.

Из сборки VMS удалён слой sockadapt.

=item *

Явная поддержка для VMS версий до v7.0 и DEC C версий до v6.0
была удалена.

=item *

Начиная с Perl 5.10.1, доморощенная обёртка C<stat> не могла
различить директорию с именем содержащим подчёркивание или же идентичным
файлом, содержащим точку в той позиции (например, t/test_pl как
директория и t/test.pl как файл).  Эта проблема была исправлена.

=item *

Сборка на VMS теперь позволяет иметь имена получаемых символов в C коде
для Perl длиннее чем 31 символ. Символы вида
C<Perl__it_was_the_best_of_times_it_was_the_worst_of_times> теперь могут
быть создано свободно без изменения размера VMS линкером.

=back

=head3 GNU/Hurd

Некоторые ошибки сборки и неудачные тесты на GNU/Hurd были исправлены с
помощью сборки DBM модулей, определения путей поиска библиотек и включения
поддержки больших файлов.

=head3 OpenVOS

Perl теперь собирается с динамической линковкой на OpenVOS, минимальная
поддерживаемая версия которого, теперь стала Релизом 17.1.0.

=head3 SunOS

Теперь определяется CC workshop C++ компилятор и используется на
системах, который поставляются без cc.

=head1 Внутренние Изменения

=over 4

=item *

Скомпилированное представление форматов теперь сохраняется через C<mg_ptr>
их C<PERL_MAGIC_fm>.  Ранее оно сохранялось в строковом буфере за пределами
C<SvLEN()> нормальной длины строки.  C<SvCOMPILED()> и
C<SvCOMPILED_{on,off}()> теперь существуют только для совместимости с
XS кодом.  Первый всегда 0, другие два теперь ни делают ничего (no-op).
(5.14.1)

=item *

Некоторые глобальные переменные были помечены как C<const>, члены в структуре
интерпретатора были пере-упорядочены и коды операций были пере-упорядочены.
Операция C<OP_AELEMFAST> была разделена на C<OP_AELEMFAST> и
C<OP_AELEMFAST_LEX>.

=item *

Когда хэш очищается от своих элементов (например, через undef(%h) или %h=()),
поле HvARRAY больше временно не зануляется.  Любой деструктор, вызванный на
освобождённых элементах, по-прежнему видит оставшиеся элементы. Таким образом,
%h=() становится больше похожим на C<delete $h{$_} for keys %h>.

=item *

Байер-Мур (Boyer-Moore) скомпилированные скаляры теперь PVMG и Байер-Мур
таблицы теперь сохраняются через mg_ptr их C<PERL_MAGIC_bm>. Ранее они были
PVGV с таблицами сохранёнными в строковом буфере за пределами C<SvLEN()>.
Это устраняет последнее место, где базовый perl сохраняет данные за пределами
C<SvLEN()>.

=item *

Упрощённая логика в C<Perl_sv_magic()> вносит небольшое изменение в
поведение в случаях ошибок, включающих неизвестные магические типы.
Ранее, если в C<Perl_sv_magic()> был передан магический тип неизвестный
ему, он

=over

=item 1.

Умирал с сообщением "Modification of a read-only value attempted"
(Произведена попытка изменения значения доступного только на чтение)
если был доступен только на чтение.

=item 2.

Возвращал без ошибки если SV уже имел такой магический тип

=item 3.

в противном случае умирал с сообщением "Don't know how to handle
magic of type \\%o" (Не знаю как обрабатывать магический тип \\%o)

=back

Теперь он всегда умирает с сообщением "Don't know how to handle
magic of type \\%o" (Не знаю как обрабатывать магический тип \\%o),
даже на доступных только на чтение значениях или SV, для которых уже
имеется неизвестный магический тип.

=item *

Экспериментальная функция C<fetch_cop_label> была переименована в
C<cop_fetch_label>.

=item *

Функция C<cop_store_label> была добавлена в API, но она
экспериментальная.

=item *

F<embedvar.h> была упрощена и идин уровень макро определений для PL_*
переменных был удалён для конфигураций по-умолчанию (немногочисленных).
Макрос PERLVAR*() теперь напрямую разворачивает свои аргументы в токены,
такие как C<PL_defgv>, вместо разворачивания в C<PL_Idefgv> с
F<embedvar.h> определением макроса соответствия C<PL_Idefgv> в C<PL_defgv>.
Для XS кода, который водил незаконную дружбу с этим представлением,
потребуется обновление.

=item *

Было добавлено API для явного выбора экспортировать символы XSUB или нет.
Больше деталей может быть найдено в комментариях к коммиту e64345f8.

=item *

Функция C<is_gv_magical_sv> была удалена и объединена с C<gv_fetchpvn_flags>.
Её вызов был предназначен для определения должен ли GV автовивифицирован в 
rvalue контексте. Теперь она была заменена новым флагом C<GV_ADDMG>
(не часть API).

=item *

Padlist'ы теперь помечены C<AvREAL>, то есть подсчитывающими ссылки.
Они всегда подсчитывали ссылки, но не были помечены таковыми, так как
F<pad.c> делал свою очистку, вместо использования обычного кода очистки
из F<sv.c>. Это приводило к проблемам при клонировании нитей. Теперь
флаг C<AvREAL> включается, а выключается в F<pad.c> прямо перед тем как
padlist освободился (после того как F<pad.c> выполнил свои процедуры
освобождения pad'ов)

=item *

Все C файлы, которые состовляют ядро Perl теперь были сконвертированы
в UTF-8.

=item *

Эти новые функции были добавлены как часть работы над символами Юникода:

    HvNAMELEN
    HvNAMEUTF8
    HvENAMELEN
    HvENAMEUTF8
    gv_init_pv
    gv_init_pvn
    gv_init_pvsv
    gv_fetchmeth_pv
    gv_fetchmeth_pvn
    gv_fetchmeth_sv
    gv_fetchmeth_pv_autoload
    gv_fetchmeth_pvn_autoload
    gv_fetchmeth_sv_autoload
    gv_fetchmethod_pv_flags
    gv_fetchmethod_pvn_flags
    gv_fetchmethod_sv_flags
    gv_autoload_pv
    gv_autoload_pvn
    gv_autoload_sv
    newGVgen_flags
    sv_derived_from_pv
    sv_derived_from_pvn
    sv_derived_from_sv
    sv_does_pv
    sv_does_pvn
    sv_does_sv
    whichsig_pv
    whichsig_pvn
    whichsig_sv
    newCONSTSUB_flags

Функции gv_fetchmethod_*_flags, такие как gv_fetchmethod_flags являются
экспериментальными и могут быть изменены в будущих релизах.

=item *

Следующие функции были добавлены.  Это I<не> является частью API:

    GvNAMEUTF8
    GvENAMELEN
    GvENAME_HEK
    CopSTASH_flags
    CopSTASH_flags_set
    PmopSTASH_flags
    PmopSTASH_flags_set
    sv_sethek
    HEKfARG

Также есть макрос C<HEKf>, соответствующий C<SVf>, для интерполяции
HEK в строках с форматом.

=item *

C<sv_catpvn_flags> теперь понимает несколько новых только-внутренних
флагов, которые сообщают ей является ли массив символов для объединения
UTF8.  Это позволяет более эффективное соединение, чем создание временных
SV для передачи в C<sv_catsv>.

=item *

Для XS AUTOLOAD подпрограмм, $AUTOLOAD выставляется ещё раз, как это было
в 5.6.0.  Это дополнение к установке C<SvPVX(cv)> для совместимости с
5.8 до 5.14.  Смотрите L<perlguts/Autoloading with XSUBs>.

=item *

Perl теперь проверяет начинается ли массив (линейная isa), возвращаемый
MRO плагином, с имени самого класса, для которого массив был создан, вместо
предположения, что это так и есть.  Это предотвращает пропуск первого
элемента при поиске метода.  Это также означает, что C<mro::get_linear_isa>
может вернуть массив на один элемент больше, чем возвращает MRO плагин
[perl #94306].

=item *

C<PL_curstash> теперь подсчитывает ссылки.

=item *

Теперь появились hint'ы набора функционала в C<PL_hints> (C<$^H>),
которые использует объявление версии, для того, чтобы избежать
загрузки F<feature.pm>.  Установка hint бита указывает, что это
пользовательский пакет функционала, который означает, что записи
в C<%^H> по-прежнему применяются.  F<feature.pm> использует это.

Макрос C<HINT_FEATURE_MASK> определён в F<perl.h> наравне с другими
hint'ами.  Другие макросы для установки и тестирования функционалов и
пакетов находятся в новом F<feature.h>.  C<FEATURE_IS_ENABLED>
(который был перемещён в F<feature.h>) больше не используется по всему
коду, в пользу использования более специфичных макросов, например,
C<FEATURE_SAY_IS_ENABLED>, который определён в F<feature.h>.

=item *

F<lib/feature.pm> теперь генерируемый файл, созданный новым скриптом
F<regen/feature.pl>, который также генерирует F<feature.h>.

=item *

Связанные массивы теперь всегда C<AvREAL>. Если C<@_> или C<DB::args>
является связанным, он сначала материализуется, для того чтобы быть
уверенным, что это всегда так.

=item *

Были добавлены две новые функции C<utf8_to_uvchr_buf()> и
C<utf8_to_uvuni_buf()>.  Это тоже самое, что и C<utf8_to_uvchr> и
C<utf8_to_uvuni> (которые теперь устарели), но принимают дополнительный
параметр, который используется для того, чтобы защитить от чтения за
пределами конца входной строки.
Смотрите L<perlapi/utf8_to_uvchr_buf> и L<perlapi/utf8_to_uvuni_buf>.

=item *

Движок регулярных выражений теперь осуществляет TRIE
регистро-независимый поиск совпадений в Юникоде.  Это может привести
к изменению вывода C<< use re 'debug'; >>, и ускорит различные
процедуры.

=item *

Появилась новая функция C<wrap_op_checker()>, которая предоставляет
безопасную для нитей альтернативу для прямой записи в C<PL_check>.

=back

=head1 Выборочные Исправления Багов

=head2 Массив и Хэш

=over

=item *

Был исправлен баг, который вызывал ошибку "Use of freed value in iteration"
(Использование освобождённого значения в итерации), если следующие два
элемента хэша, через которые будет проводится итерация, были удалены
[perl #85026]. (5.14.1)

=item *

Удаление текущего итератора хэша (элемент хэша, который будет возвращён
при следующем вызове C<each>) в пустом контексте не освобождает его
[perl #85026].

=item *

Удаление метода через синтаксис C<delete $Class::{method}> используемое
для обновления кэша методов работает в пустом контексте, но не в
скалярном или списочном контексте.

=item *

Когда элемент хэша удаляется в пустом контексте, внутренний запись хэша
освобождается теперь перед освобождением значения, чтобы вызываемый этим
последним освобождением деструктор, не видел хэш в рассогласованном
состоянии.  Существовала возможность вызвать двойное освобождение, если
деструктор сам освобождал хэш [perl #100340].

=item *

Оптимизация C<keys> в Perl 5.12.0, чтобы сделать его быстрее на пустых
хэшах привела к тому, что C<each> не сбрасывал итератор, если вызывался
после удаления последнего элемента.

=item *

Освобождение глубоко вложенных хэшей больше не приводит к
крахам [perl #44225].

=item *

Существует возможность из XS кода создавать хэши с элементами, которые
не имеют значений.  Раньше доступ к элементу хэша и использование slice
оператора приводили к краху при работе в lvalue контексте.  Теперь они
производят сообщение об ошибке "Modification of non-creatable hash
value attempted" (Предпринята модификация несоздаваемого значения хэша).

=item *

Если списочное присвоение к хэшу или массиву инициирует деструкторы,
которые освобождают сам хэш или массив, то в результате происходит крах.
Теперь это исправлено [perl #107440].

=item *

Раньше было возможно освободить typeglob локализованного массива или хэша
(например, C<local @{"x"}; delete $::{x}>), приводя к краху при выходе из
контекста.

=item *

Были исправлены некоторые баги в ядре, затрагивающие L<Hash::Util>:
блокировка элемента хэша, который является копией glob, больше не приводит
к последующему присвоению, приводящее к повреждению glob'а, и
разблокирование элемента хэша, который содержит копируемый-при-записи
скаляр, больше не приводит к модификации этого скаляра и изменению
других скаляров, которые разделяют тот же буфер строки.

=back

=head2 Исправления в C API

=over

=item *

XS функция C<newHVhv> теперь работает со связанными хэшами, вместо краха или
возвращения пустого хэша.

=item *

C макрос C<SvIsCOW> теперь возвращает ложь для доступных только на чтение
копий typeglob, которые были созданы так:

  $hash{elem} = *foo;
  Hash::Util::lock_value %hash, 'elem';

Раньше возвращалась истина.

=item *

C функция C<SvPVutf8> больше не пытается изменить свой аргумент, приводящее
к ошибкам [perl #108994].

=item *

C<SvPVutf8> теперь работает правильно с магическими переменными.

=item *

C<SvPVbyte> теперь работает правильно с не-PV.

=item *

При вызове с искажённым UTF-8 вводом, XS-запускаемые функции
C<is_utf8_string()>, C<is_utf8_string_loc()> и
C<is_utf8_string_loclen()> могут читать до 12 байтов за пределами конца
входной строки. Этого больше не происходит [perl #32080]. Однако, в
настоящий момент, C<is_utf8_char()> по-прежнему имеет этот дефект,
смотрите L</is_utf8_char()> выше.

=item *

Функция C-уровня C<pregcomp> может быть смущена если шаблон был в UTF8,
если шаблон был перегружен, связан или иной магический скаляр
[perl #101940].

=back

=head2 Hint'ы времени компиляции

=over

=item *

Связывание C<%^H> больше не приводит к краху perl или игнорированию
содержимого C<%^H>, при входе в контекст компиляции [perl #106282].

=item *

C<eval $string> и C<require> раньше не локализовали C<%^H> в ходе
компиляции, если он был пуст во время, когда сам вызов C<eval>
компилировался.  Это приводило к таким жутким сторонним эффектам, как,
например, C<use re "/m"> включал другие флаги, которые окружающий код
пытался включить для вызывающей процедуры [perl #68750].

=item *

C<eval $string> и C<require> больше не локализуют hint'ы (C<$^H> и
C<%^H>) во время работы, а только во время компиляции $string или
подключаемого файла.  Это делает запись C<BEGIN { $^H{foo}=7 }>
эквивалентной C<BEGIN { eval '$^H{foo}=7' }> [perl #70151].

=item *

Создание блока BEGIN из XS кода (через C<newXS> или C<newATTRSUB>) в
завершении сделает hint'ы компилируемого в данный момент кода текущими
hint'ами.  Это может привести к предупреждениям в контексте с подавленными
предупреждениями.

=back

=head2 Скаляры копируемые-при-записи

Копируемые-при-записи или общие скаляры ключа хэша были введены в
5.8.0, но большая часть Perl кода не сталкивается с ними (они
используются в основном для внутренних целей).  Perl 5.10.0
расширил их, так, например, присвоение C<__PACKAGE__> или ключа хэша
скаляру, делает его копируемым-при-записи.  Некоторые части Perl не
были обновлены с учётом их присутствия, теперь это было исправлено.

=over

=item *

В C<utf8::decode> был неприятный баг, который модифицировал на месте
строковой буфер копируемого-при-записи скаляра (т.е. не создавая
промежуточной копии).  Это приводило к появлению двух элементов в хэше
с одинаковым ключом [perl #91834].

=item *

Для Lvalue подпрограмм не позволялось возвращать COW (копируемые-при-записи)
скаляры.  Это было исправлено для lvalue скалярного контекста в perl 5.12.3
и 5.14.0, но для списочного контекста это оставалось не исправленным до этого
релиза.

=item *

Элементы ограниченных хэшей (смотрите прагму L<fields>), содержащие
копируемые-при-записи значения не могут быть удалены и не могут быть
очищены (C<%hash = ()>).

=item *

Локализация связанной переменной раньше делало её доступной только на
чтение, если она содержала копируемую-при-записи строку.

=item *

Присвоение копируемой-при-записи строки к элементу stash больше не
приводит к двойному освобождению.  Несмотря на это изменение, результат
подобного присвоения по-прежнему неопределён.

=item *

Присвоение копируемой-при-записи строки к связанной переменной больше
не препятствует связыванию этой переменной, если она внутренне
представлена как PVMG или PVLV.

=item *

Делая подстановку в связанной переменной, возвращавшей
копируемый-при-записи скаляр, раньше приводило к ошибкам утверждения
(assert) или предупреждениям "Attempt to free nonexistent shared
string" (Попытка освободить несуществующую общую строку).

=item *

Это регрессия по-сравнению с 5.12: в 5.14.0 битовые операторы
присвоения C<|=>, C<^=> и C<&=> оставляли левую часть неопределённой,
в случае если она была строкой копируемая-при-записи [perl #108480].

=item *

L<Storable>, L<Devel::Peek> и L<PerlIO::scalar> имели схожие проблемы.
Смотрите L</Обновлённые Модули и Прагмы> выше.

=back

=head2 The debugger

=over

=item *

F<dumpvar.pl>, and consequently the C<x> command in the debugger, have been
fixed to handle objects blessed into classes whose names contain "=".  The
contents of such objects used not to be dumped [perl #101814].

=item *

The "R" command for restarting a debugger session has been fixed to work on
Windows, or any other system lacking a C<POSIX::_SC_OPEN_MAX> constant
[perl #87740].

=item *

The C<#line 42 foo> directive used not to update the arrays of lines used
by the debugger if it occurred in a string eval.  This was partially fixed
in 5.14, but it only worked for a single C<#line 42 foo> in each eval.  Now
it works for multiple.

=item *

When subroutine calls are intercepted by the debugger, the name of the
subroutine or a reference to it is stored in C<$DB::sub>, for the debugger
to access.  In some cases (such as C<$foo = *bar; undef *bar; &$foo>)
C<$DB::sub> would be set to a name that could not be used to find the
subroutine, and so the debugger's attempt to call it would fail.  Now the
check to see whether a reference is needed is more robust, so those
problems should not happen anymore [rt.cpan.org #69862].

=item *

Every subroutine has a filename associated with it that the debugger uses.
The one associated with constant subroutines used to be misallocated when
cloned under threads.  Consequently, debugging threaded applications could
result in memory corruption [perl #96126].

=back

=head2 Dereferencing operators

=over

=item *

C<defined(${"..."})>, C<defined(*{"..."})>, etc., used to
return true for most, but not all built-in variables, if
they had not been used yet.  This bug affected C<${^GLOBAL_PHASE}> and
C<${^UTF8CACHE}>, among others.  It also used to return false if the
package name was given as well (C<${"::!"}>) [perl #97978, #97492].

=item *

Perl 5.10.0 introduced a similar bug: C<defined(*{"foo"})> where "foo"
represents the name of a built-in global variable used to return false if
the variable had never been used before, but only on the I<first> call.
This, too, has been fixed.

=item *

Since 5.6.0, C<*{ ... }> has been inconsistent in how it treats undefined
values.  It would die in strict mode or lvalue context for most undefined
values, but would be treated as the empty string (with a warning) for the
specific scalar return by C<undef()> (C<&PL_sv_undef> internally).  This
has been corrected.  C<undef()> is now treated like other undefined
scalars, as in Perl 5.005.

=back

=head2 Filehandle, last-accessed

Perl has an internal variable that stores the last filehandle to be
accessed.  It is used by C<$.> and by C<tell> and C<eof> without
arguments.

=over

=item *

It used to be possible to set this internal variable to a glob copy and
then modify that glob copy to be something other than a glob, and still
have the last-accessed filehandle associated with the variable after
assigning a glob to it again:

    my $foo = *STDOUT;  # $foo is a glob copy
    <$foo>;             # $foo is now the last-accessed handle
    $foo = 3;           # no longer a glob
    $foo = *STDERR;     # still the last-accessed handle

Now the C<$foo = 3> assignment unsets that internal variable, so there
is no last-accessed filehandle, just as if C<< <$foo> >> had never
happened.

This also prevents some unrelated handle from becoming the last-accessed
handle if $foo falls out of scope and the same internal SV gets used for
another handle [perl #97988].

=item *

A regression in 5.14 caused these statements not to set that internal
variable:

    my $fh = *STDOUT;
    tell $fh;
    eof  $fh;
    seek $fh, 0,0;
    tell     *$fh;
    eof      *$fh;
    seek     *$fh, 0,0;
    readline *$fh;

This is now fixed, but C<tell *{ *$fh }> still has the problem, and it
is not clear how to fix it [perl #106536].

=back

=head2 Filetests and C<stat>

The term "filetests" refers to the operators that consist of a hyphen
followed by a single letter: C<-r>, C<-x>, C<-M>, etc.  The term "stacked"
when applied to filetests means followed by another filetest operator
sharing the same operand, as in C<-r -x -w $fooo>.

=over

=item *

C<stat> produces more consistent warnings.  It no longer warns for "_"
[perl #71002] and no longer skips the warning at times for other unopened
handles.  It no longer warns about an unopened handle when the operating
system's C<fstat> function fails.

=item *

C<stat> would sometimes return negative numbers for large inode numbers,
because it was using the wrong internal C type. [perl #84590]

=item *

C<lstat> is documented to fall back to C<stat> (with a warning) when given
a filehandle.  When passed an IO reference, it was actually doing the
equivalent of S<C<stat _>> and ignoring the handle.

=item *

C<-T _> with no preceding C<stat> used to produce a
confusing "uninitialized" warning, even though there
is no visible uninitialized value to speak of.

=item *

C<-T>, C<-B>, C<-l> and C<-t> now work
when stacked with other filetest operators
[perl #77388].

=item *

In 5.14.0, filetest ops (C<-r>, C<-x>, etc.) started calling FETCH on a
tied argument belonging to the previous argument to a list operator, if
called with a bareword argument or no argument at all.  This has been
fixed, so C<push @foo, $tied, -r> no longer calls FETCH on C<$tied>.

=item *

In Perl 5.6, C<-l> followed by anything other than a bareword would treat
its argument as a file name.  That was changed in 5.8 for glob references
(C<\*foo>), but not for globs themselves (C<*foo>).  C<-l> started
returning C<undef> for glob references without setting the last
stat buffer that the "_" handle uses, but only if warnings
were turned on.  With warnings off, it was the same as 5.6.
In other words, it was simply buggy and inconsistent.  Now the 5.6
behaviour has been restored.

=item *

C<-l> followed by a bareword no longer "eats" the previous argument to
the list operator in whose argument list it resides.  Hence,
C<print "bar", -l foo> now actually prints "bar", because C<-l>
on longer eats it.

=item *

Perl keeps several internal variables to keep track of the last stat
buffer, from which file(handle) it originated, what type it was, and
whether the last stat succeeded.

There were various cases where these could get out of synch, resulting in
inconsistent or erratic behaviour in edge cases (every mention of C<-T>
applies to C<-B> as well):

=over

=item *

C<-T I<HANDLE>>, even though it does a C<stat>, was not resetting the last
stat type, so an C<lstat _> following it would merrily return the wrong
results.  Also, it was not setting the success status.

=item *

Freeing the handle last used by C<stat> or a filetest could result in
S<C<-T _>> using an unrelated handle.

=item *

C<stat> with an IO reference would not reset the stat type or record the
filehandle for S<C<-T _>> to use.

=item *

Fatal warnings could cause the stat buffer not to be reset
for a filetest operator on an unopened filehandle or C<-l> on any handle.
Fatal warnings also stopped C<-T> from setting C<$!>.

=item *

When the last stat was on an unreadable file, C<-T _> is supposed to
return C<undef>, leaving the last stat buffer unchanged.  But it was
setting the stat type, causing C<lstat _> to stop working.

=item *

C<-T I<FILENAME>> was not resetting the internal stat buffers for
unreadable files.

=back

These have all been fixed.

=back

=head2 Formats

=over

=item *

A number of edge cases have been fixed with formats and C<formline>;
in particular, where the format itself is potentially variable (such as
with ties and overloading), and where the format and data differ in their
encoding.  In both these cases, it used to possible for the output to be
corrupted [perl #91032].

=item *

C<formline> no longer converts its argument into a string in-place.  So
passing a reference to C<formline> no longer destroys the reference
[perl #79532].

=item *

Assignment to C<$^A> (the format output accumulator) now recalculates
the number of lines output.

=back

=head2 C<given> and C<when>

=over

=item *

C<given> was not scoping its implicit $_ properly, resulting in memory
leaks or "Variable is not available" warnings [perl #94682].

=item *

C<given> was not calling set-magic on the implicit lexical C<$_> that it
uses.  This meant, for example, that C<pos> would be remembered from one
execution of the same C<given> block to the next, even if the input were a
different variable [perl #84526].

=item *

C<when> blocks are now capable of returning variables declared inside the
enclosing C<given> block [perl #93548].

=back

=head2 The C<glob> operator

=over

=item *

On OSes other than VMS, Perl's C<glob> operator (and the C<< <...> >> form)
use L<File::Glob> underneath.  L<File::Glob> splits the pattern into words,
before feeding each word to its C<bsd_glob> function.

There were several inconsistencies in the way the split was done.  Now
quotation marks (' and ") are always treated as shell-style word delimiters
(that allow whitespace as part of a word) and backslashes are always
preserved, unless they exist to escape quotation marks.  Before, those
would only sometimes be the case, depending on whether the pattern
contained whitespace.  Also, escaped whitespace at the end of the pattern
is no longer stripped [perl #40470].

=item *

C<CORE::glob> now works as a way to call the default globbing function.  It
used to respect overrides, despite the C<CORE::> prefix.

=item *

Under miniperl (used to configure modules when perl itself is built),
C<glob> now clears %ENV before calling csh, since the latter croaks on some
systems if it does not like the contents of the LS_COLORS enviroment
variable [perl #98662].

=back

=head2 Lvalue subroutines

=over

=item *

Explicit return now returns the actual argument passed to return, instead
of copying it [perl #72724, #72706].

=item *

Lvalue subroutines used to enforce lvalue syntax (i.e., whatever can go on
the left-hand side of C<=>) for the last statement and the arguments to
return.  Since lvalue subroutines are not always called in lvalue context,
this restriction has been lifted.

=item *

Lvalue subroutines are less restrictive as to what values can be returned.
It used to croak on values returned by C<shift> and C<delete> and from
other subroutines, but no longer does so [perl #71172].

=item *

Empty lvalue subroutines (C<sub :lvalue {}>) used to return C<@_> in list
context.  In fact, all subroutines used to, but regular subs were fixed in
Perl 5.8.2.  Now lvalue subroutines have been likewise fixed.

=item *

Autovivification now works on values returned from lvalue subroutines
[perl #7946], as does returning C<keys> in lvalue context.

=item *

Lvalue subroutines used to copy their return values in rvalue context.  Not
only was this a waste of CPU cycles, but it also caused bugs.  A C<($)>
prototype would cause an lvalue sub to copy its return value [perl #51408],
and C<while(lvalue_sub() =~ m/.../g) { ... }> would loop endlessly
[perl #78680].

=item *

When called in potential lvalue context
(e.g., subroutine arguments or a list
passed to C<for>), lvalue subroutines used to copy
any read-only value that was returned.  E.g., C< sub :lvalue { $] } >
would not return C<$]>, but a copy of it.

=item *

When called in potential lvalue context, an lvalue subroutine returning
arrays or hashes used to bind the arrays or hashes to scalar variables,
resulting in bugs.  This was fixed in 5.14.0 if an array were the first
thing returned from the subroutine (but not for C<$scalar, @array> or
hashes being returned).  Now a more general fix has been applied
[perl #23790].

=item *

Method calls whose arguments were all surrounded with C<my()> or C<our()>
(as in C<< $object->method(my($a,$b)) >>) used to force lvalue context on
the subroutine.  This would prevent lvalue methods from returning certain
values.

=item *

Lvalue sub calls that are not determined to be such at compile time
(C<&$name> or &{"name"}) are no longer exempt from strict refs if they
occur in the last statement of an lvalue subroutine [perl #102486].

=item *

Sub calls whose subs are not visible at compile time, if
they occurred in the last statement of an lvalue subroutine,
would reject non-lvalue subroutines and die with "Can't modify non-lvalue
subroutine call" [perl #102486].

Non-lvalue sub calls whose subs I<are> visible at compile time exhibited
the opposite bug.  If the call occurred in the last statement of an lvalue
subroutine, there would be no error when the lvalue sub was called in
lvalue context.  Perl would blindly assign to the temporary value returned
by the non-lvalue subroutine.

=item *

C<AUTOLOAD> routines used to take precedence over the actual sub being
called (i.e., when autoloading wasn't needed), for sub calls in lvalue or
potential lvalue context, if the subroutine was not visible at compile
time.

=item *

Applying the C<:lvalue> attribute to an XSUB or to an aliased subroutine
stub with C<< sub foo :lvalue; >> syntax stopped working in Perl 5.12.
This has been fixed.

=item *

Applying the :lvalue attribute to subroutine that is already defined does
not work properly, as the attribute changes the way the sub is compiled.
Hence, Perl 5.12 began warning when an attempt is made to apply the
attribute to an already defined sub.  In such cases, the attribute is
discarded.

But the change in 5.12 missed the case where custom attributes are also
present: that case still silently and ineffectively applied the attribute.
That omission has now been corrected.  C<sub foo :lvalue :Whatever> (when
C<foo> is already defined) now warns about the :lvalue attribute, and does
not apply it.

=item *

A bug affecting lvalue context propagation through nested lvalue subroutine
calls has been fixed.  Previously, returning a value in nested rvalue
context would be treated as lvalue context by the inner subroutine call,
resulting in some values (such as read-only values) being rejected.

=back

=head2 Overloading

=over

=item *

Arithmetic assignment (C<$left += $right>) involving overloaded objects
that rely on the 'nomethod' override no longer segfault when the left
operand is not overloaded.

=item *

Errors that occur when methods cannot be found during overloading now
mention the correct package name, as they did in 5.8.x, instead of
erroneously mentioning the "overload" package, as they have since 5.10.0.

=item *

Undefining C<%overload::> no longer causes a crash.

=back

=head2 Prototypes of built-in keywords

=over

=item *

The C<prototype> function no longer dies for the C<__FILE__>, C<__LINE__>
and C<__PACKAGE__> directives.  It now returns an empty-string prototype
for them, because they are syntactically indistinguishable from nullary
functions like C<time>.

=item *

C<prototype> now returns C<undef> for all overridable infix operators,
such as C<eq>, which are not callable in any way resembling functions.
It used to return incorrect prototypes for some and die for others
[perl #94984].

=item *

The prototypes of several built-in functions--C<getprotobynumber>, C<lock>,
C<not> and C<select>--have been corrected, or at least are now closer to
reality than before.

=back

=head2 Regular expressions

=for comment Is it possible to merge some of these items?

=over 4

=item *

C</[[:ascii:]]/> and C</[[:blank:]]/> now use locale rules under
C<use locale> when the platform supports that.  Previously, they used
the platform's native character set.

=item *

C<m/[[:ascii:]]/i> and C</\p{ASCII}/i> now match identically (when not
under a differing locale).  This fixes a regression introduced in 5.14
in which the first expression could match characters outside of ASCII,
such as the KELVIN SIGN.

=item *

C</.*/g> would sometimes refuse to match at the end of a string that ends
with "\n".  This has been fixed [perl #109206].

=item *

Starting with 5.12.0, Perl used to get its internal bookkeeping muddled up
after assigning C<${ qr// }> to a hash element and locking it with
L<Hash::Util>.  This could result in double frees, crashes or erratic
behaviour.

=item *

The new (in 5.14.0) regular expression modifier C</a> when repeated like
C</aa> forbids the characters outside the ASCII range that match
characters inside that range from matching under C</i>.  This did not
work under some circumstances, all involving alternation, such as:

 "\N{KELVIN SIGN}" =~ /k|foo/iaa;

succeeded inappropriately.  This is now fixed.

=item *

5.14.0 introduced some memory leaks in regular expression character
classes such as C<[\w\s]>, which have now been fixed. (5.14.1)

=item *

An edge case in regular expression matching could potentially loop.
This happened only under C</i> in bracketed character classes that have
characters with multi-character folds, and the target string to match
against includes the first portion of the fold, followed by another
character that has a multi-character fold that begins with the remaining
portion of the fold, plus some more.

 "s\N{U+DF}" =~ /[\x{DF}foo]/i

is one such case.  C<\xDF> folds to C<"ss">. (5.14.1)

=item *

A few characters in regular expression pattern matches did not
match correctly in some circumstances, all involving C</i>.  The
affected characters are:
COMBINING GREEK YPOGEGRAMMENI,
GREEK CAPITAL LETTER IOTA,
GREEK CAPITAL LETTER UPSILON,
GREEK PROSGEGRAMMENI,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
LATIN SMALL LETTER LONG S,
LATIN SMALL LIGATURE LONG S T,
and
LATIN SMALL LIGATURE ST.

=item *

A memory leak regression in regular expression compilation
under threading has been fixed.

=item *

A regression introduced in 5.13.6 has
been fixed.  This involved an inverted
bracketed character class in a regular expression that consisted solely
of a Unicode property.  That property wasn't getting inverted outside the
Latin1 range.

=item *

Three problematic Unicode characters now work better in regex pattern matching under C</i>

In the past, three Unicode characters:
LATIN SMALL LETTER SHARP S,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
and
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
along with the sequences that they fold to
(including "ss" in the case of LATIN SMALL LETTER SHARP S),
did not properly match under C</i>.  5.14.0 fixed some of these cases,
but introduced others, including a panic when one of the characters or
sequences was used in the C<(?(DEFINE)> regular expression predicate.
The known bugs that were introduced in 5.14 have now been fixed; as well
as some other edge cases that have never worked until now.  All these
involve using the characters and sequences outside bracketed character
classes under C</i>.  This closes [perl #98546].

There remain known problems when using certain characters with
multi-character folds inside bracketed character classes, including such
constructs as C<qr/[\N{LATIN SMALL LETTER SHARP}a-z]/i>.  These
remaining bugs are addressed in [perl #89774].

=item *

RT #78266: The regex engine has been leaking memory when accessing
named captures that weren't matched as part of a regex ever since 5.10
when they were introduced, e.g. this would consume over a hundred MB of
memory:

    for (1..10_000_000) {
        if ("foo" =~ /(foo|(?<capture>bar))?/) {
            my $capture = $+{capture}
        }
    }
    system "ps -o rss $$"'

=item *

In 5.14, C</[[:lower:]]/i> and C</[[:upper:]]/i> no longer matched the
opposite case.  This has been fixed [perl #101970].

=item *

A regular expression match with an overloaded object on the right-hand side
would in some cases stringify the object too many times.

=item *

A regression has been fixed that was introduced in 5.14, in C</i>
regular expression matching, in which a match improperly fails if the
pattern is in UTF-8, the target string is not, and a Latin-1 character
precedes a character in the string that should match the pattern.
[perl #101710]

=item *

In case-insensitive regular expression pattern matching, no longer on
UTF-8 encoded strings does the scan for the start of match only look at
the first possible position.  This caused matches such as
C<"f\x{FB00}" =~ /ff/i> to fail.

=item *

The regexp optimiser no longer crashes on debugging builds when merging
fixed-string nodes with inconvenient contents.

=item *

A panic involving the combination of the regular expression modifiers
C</aa> and the C<\b> escape sequence introduced in 5.14.0 has been
fixed [perl #95964].

=item *

The combination of the regular expression modifiers C</aa> and the C<\b>
and C<\B> escape sequences did not work properly on UTF-8 encoded
strings.  All non-ASCII characters under C</aa> should be treated as
non-word characters, but what was happening was that Unicode rules were
used to determine wordness/non-wordness for non-ASCII characters.  This
is now fixed [perl #95968].

=item *

C<< (?foo: ...) >> no longer loses passed in character set.

=item *

The trie optimisation used to have problems with alternations containing
an empty C<(?:)>, causing C<< "x" =~ /\A(?>(?:(?:)A|B|C?x))\z/ >> not to
match, whereas it should [perl #111842].

=item *

Use of lexical (C<my>) variables in code blocks embedded in regular
expressions will no longer result in memory corruption or crashes.

Nevertheless, these code blocks are still experimental, as there are still
problems with the wrong variables being closed over (in loops for instance)
and with abnormal exiting (e.g., C<die>) causing memory corruption.

=item *

The C<\h>, C<\H>, C<\v> and C<\V> regular expression metacharacters used to
cause a panic error message when attempting to match at the end of the
string [perl #96354].

=item *

The abbreviations for four C1 control characters C<MW> C<PM>, C<RI>, and
C<ST> were previously unrecognized by C<\N{}>, vianame(), and
string_vianame().

=item *

Mentioning a variable named "&" other than C<$&> (i.e., C<@&> or C<%&>) no
longer stops C<$&> from working.  The same applies to variables named "'"
and "`" [perl #24237].

=item *

Creating a C<UNIVERSAL::AUTOLOAD> sub no longer stops C<%+>, C<%-> and
C<%!> from working some of the time [perl #105024].

=back

=head2 Smartmatching

=over

=item *

C<~~> now correctly handles the precedence of Any~~Object, and is not tricked
by an overloaded object on the left-hand side.

=item *

In Perl 5.14.0, C<$tainted ~~ @array> stopped working properly.  Sometimes
it would erroneously fail (when C<$tainted> contained a string that occurs
in the array I<after> the first element) or erroneously succeed (when
C<undef> occurred after the first element) [perl #93590].

=back

=head2 The C<sort> operator

=over

=item *

C<sort> was not treating C<sub {}> and C<sub {()}> as equivalent when
such a sub was provided as the comparison routine.  It used to croak on
C<sub {()}>.

=item *

C<sort> now works once more with custom sort routines that are XSUBs.  It
stopped working in 5.10.0.

=item *

C<sort> with a constant for a custom sort routine, although it produces
unsorted results, no longer crashes.  It started crashing in 5.10.0.

=item *

Warnings emitted by C<sort> when a custom comparison routine returns a
non-numeric value now contain "in sort" and show the line number of the
C<sort> operator, rather than the last line of the comparison routine.  The
warnings also occur now only if warnings are enabled in the scope where
C<sort> occurs.  Previously the warnings would occur if enabled in the
comparison routine's scope.

=item *

C<< sort { $a <=> $b } >>, which is optimised internally, now produces
"uninitialized" warnings for NaNs (not-a-number values), since C<< <=> >>
returns C<undef> for those.  This brings it in line with
S<C<< sort { 1; $a <=> $b } >>> and other more complex cases, which are not
optimised [perl #94390].

=back

=head2 The C<substr> operator

=over

=item *

Tied (and otherwise magical) variables are no longer exempt from the
"Attempt to use reference as lvalue in substr" warning.

=item *

That warning now occurs when the returned lvalue is assigned to, not
when C<substr> itself is called.  This only makes a difference if the
return value of C<substr> is referenced and assigned to later.

=item *

Passing a substring of a read-only value or a typeglob to a function
(potential lvalue context) no longer causes an immediate "Can't coerce"
or "Modification of a read-only value" error.  That error only occurs
if and when the value passed is assigned to.

The same thing happens with the "substr outside of string" error.  If
the lvalue is only read, not written to, it is now just a warning, as
with rvalue C<substr>.

=item *

C<substr> assignments no longer call FETCH twice if the first argument
is a tied variable, just once.

=back

=head2 Support for embedded nulls

Some parts of Perl did not work correctly with nulls (C<chr 0>) embedded in
strings.  That meant that, for instance, C<< $m = "a\0b"; foo->$m >> would
call the "a" method, instead of the actual method name contained in $m.
These parts of perl have been fixed to support nulls:

=over

=item *

Method names

=item *

Typeglob names (including filehandle and subroutine names)

=item *

Package names, including the return value of C<ref()>

=item *

Typeglob elements (C<*foo{"THING\0stuff"}>)

=item *

Signal names

=item *

Various warnings and error messages that mention variable names or values,
methods, etc.

=back

One side effect of these changes is that blessing into "\0" no longer
causes C<ref()> to return false.

=head2 Threading bugs

=over

=item *

Typeglobs returned from threads are no longer cloned if the parent thread
already has a glob with the same name.  This means that returned
subroutines will now assign to the right package variables [perl #107366].

=item *

Some cases of threads crashing due to memory allocation during cloning have
been fixed [perl #90006].

=item *

Thread joining would sometimes emit "Attempt to free unreferenced scalar"
warnings if C<caller> had been used from the C<DB> package prior to thread
creation [perl #98092].

=item *

Locking a subroutine (via C<lock &sub>) is no longer a compile-time error
for regular subs.  For lvalue subroutines, it no longer tries to return the
sub as a scalar, resulting in strange side effects like C<ref \$_>
returning "CODE" in some instances.

C<lock &sub> is now a run-time error if L<threads::shared> is loaded (a
no-op otherwise), but that may be rectified in a future version.

=back

=head2 Tied variables

=over

=item *

Various cases in which FETCH was being ignored or called too many times
have been fixed:

=over

=item *

C<PerlIO::get_layers> [perl #97956]

=item *

C<$tied =~ y/a/b/>, C<chop $tied> and C<chomp $tied> when $tied holds a
reference.

=item *

When calling C<local $_> [perl #105912]

=item *

Four-argument C<select>

=item *

A tied buffer passed to C<sysread>

=item *

C<< $tied .= <> >>

=item *

Three-argument C<open>, the third being a tied file handle
(as in C<< open $fh, ">&", $tied >>)

=item *

C<sort> with a reference to a tied glob for the comparison routine.

=item *

C<..> and C<...> in list context [perl #53554].

=item *

C<${$tied}>, C<@{$tied}>, C<%{$tied}> and C<*{$tied}> where the tied
variable returns a string (C<&{}> was unaffected)

=item *

C<defined ${ $tied_variable }>

=item *

Various functions that take a filehandle argument in rvalue context
(C<close>, C<readline>, etc.) [perl #97482]

=item *

Some cases of dereferencing a complex expression, such as
C<${ (), $tied } = 1>, used to call C<FETCH> multiple times, but now call
it once.

=item *

C<$tied-E<gt>method> where $tied returns a package name--even resulting in
a failure to call the method, due to memory corruption

=item *

Assignments like C<*$tied = \&{"..."}> and C<*glob = $tied>

=item *

C<chdir>, C<chmod>, C<chown>, C<utime>, C<truncate>, C<stat>, C<lstat> and
the filetest ops (C<-r>, C<-x>, etc.)

=back

=item *

C<caller> sets C<@DB::args> to the subroutine arguments when called from
the DB package.  It used to crash when doing so if C<@DB::args> happened to
be tied.  Now it croaks instead.

=item *

Tying an element of %ENV or C<%^H> and then deleting that element would
result in a call to the tie object's DELETE method, even though tying the
element itself is supposed to be equivalent to tying a scalar (the element
is, of course, a scalar) [perl #67490].

=item *

When Perl autovivifies an element of a tied array or hash (which entails
calling STORE with a new reference), it now calls FETCH immediately after
the STORE, instead of assuming that FETCH would have returned the same
reference.  This can make it easier to implement tied objects [perl #35865, #43011].

=item *

Four-argument C<select> no longer produces its "Non-string passed as
bitmask" warning on tied or tainted variables that are strings.

=item *

Localising a tied scalar that returns a typeglob no longer stops it from
being tied till the end of the scope.

=item *

Attempting to C<goto> out of a tied handle method used to cause memory
corruption or crashes.  Now it produces an error message instead
[perl #8611].

=item *

A bug has been fixed that occurs when a tied variable is used as a
subroutine reference:  if the last thing assigned to or returned from the
variable was a reference or typeglob, the C<\&$tied> could either crash or
return the wrong subroutine.  The reference case is a regression introduced
in Perl 5.10.0.  For typeglobs, it has probably never worked till now.

=back

=head2 Version objects and vstrings

=over

=item *

The bitwise complement operator (and possibly other operators, too) when
passed a vstring would leave vstring magic attached to the return value,
even though the string had changed.  This meant that
C<< version->new(~v1.2.3) >> would create a version looking like "v1.2.3"
even though the string passed to C<< version->new >> was actually
"\376\375\374".  This also caused L<B::Deparse> to deparse C<~v1.2.3>
incorrectly, without the C<~> [perl #29070].

=item *

Assigning a vstring to a magic (e.g., tied, C<$!>) variable and then
assigning something else used to blow away all the magic.  This meant that
tied variables would come undone, C<$!> would stop getting updated on
failed system calls, C<$|> would stop setting autoflush, and other
mischief would take place.  This has been fixed.

=item *

C<< version->new("version") >> and C<printf "%vd", "version"> no longer
crash [perl #102586].

=item *

Version comparisons, such as those that happen implicitly with C<use
v5.43>, no longer cause locale settings to change [perl #105784].

=item *

Version objects no longer cause memory leaks in boolean context
[perl #109762].

=back

=head2 Warnings, redefinition

=over

=item *

Subroutines from the C<autouse> namespace are once more exempt from
redefinition warnings.  This used to work in 5.005, but was broken in
5.6 for most subroutines.  For subs created via XS that redefine
subroutines from the C<autouse> package, this stopped working in 5.10.

=item *

New XSUBs now produce redefinition warnings if they overwrite existing
subs, as they did in 5.8.x.  (The C<autouse> logic was reversed in
5.10-14.  Only subroutines from the C<autouse> namespace would warn
when clobbered.)

=item *

C<newCONSTSUB> used to use compile-time warning hints, instead of
run-time hints.  The following code should never produce a redefinition
warning, but it used to, if C<newCONSTSUB> redefined an existing
subroutine:

    use warnings;
    BEGIN {
        no warnings;
        some_XS_function_that_calls_new_CONSTSUB();
    }

=item *

Redefinition warnings for constant subroutines are on by default (what
are known as severe warnings in L<perldiag>).  This was only the case
when it was a glob assignment or declaration of a Perl subroutine that
caused the warning.  If the creation of XSUBs triggered the warning, it
was not a default warning.  This has been corrected.

=item *

The internal check to see whether a redefinition warning should occur
used to emit "uninitialized" warnings in cases like this:

    use warnings "uninitialized";
    use constant {u => undef, v => undef};
    sub foo(){u}
    sub foo(){v}

=back

=head2 Warnings, "Uninitialized"

=over

=item *

Various functions that take a filehandle argument in rvalue context
(C<close>, C<readline>, etc.) used to warn twice for an undefined handle
[perl #97482].

=item *

C<dbmopen> now only warns once, rather than three times, if the mode
argument is C<undef> [perl #90064].

=item *

The C<+=> operator does not usually warn when the left-hand side is
C<undef>, but it was doing so for tied variables.  This has been fixed
[perl #44895].

=item *

A bug fix in Perl 5.14 introduced a new bug, causing "uninitialized"
warnings to report the wrong variable if the operator in question had
two operands and one was C<%{...}> or C<@{...}>.  This has been fixed
[perl #103766].

=item *

C<..> and C<...> in list context now mention the name of the variable in
"uninitialized" warnings for string (as opposed to numeric) ranges.

=back

=head2 Weak references

=over

=item *

Weakening the first argument to an automatically-invoked C<DESTROY> method
could result in erroneous "DESTROY created new reference" errors or
crashes.  Now it is an error to weaken a read-only reference.

=item *

Weak references to lexical hashes going out of scope were not going stale
(becoming undefined), but continued to point to the hash.

=item *

Weak references to lexical variables going out of scope are now broken
before any magical methods (e.g., DESTROY on a tie object) are called.
This prevents such methods from modifying the variable that will be seen
the next time the scope is entered.

=item *

Creating a weak reference to an @ISA array or accessing the array index
(C<$#ISA>) could result in confused internal bookkeeping for elements
subsequently added to the @ISA array.  For instance, creating a weak
reference to the element itself could push that weak reference on to @ISA;
and elements added after use of C<$#ISA> would be ignored by method lookup
[perl #85670].

=back

=head2 Other notable fixes

=over

=item *

C<quotemeta> now quotes consistently the same non-ASCII characters under
C<use feature 'unicode_strings'>, regardless of whether the string is
encoded in UTF-8 or not, hence fixing the last vestiges (we hope) of the
infamous L<perlunicode/The "Unicode Bug">.  [perl #77654].

Which of these code points is quoted has changed, based on Unicode's
recommendations.  See L<perlfunc/quotemeta> for details.

=item *

When one writes C<open foo || die>, which used to work in Perl 4, a
"Precedence problem" warning is produced.  This warning used erroneously to
apply to fully-qualified bareword handle names not followed by C<||>.  This
has been corrected.

=item *

After package aliasing (C<*foo:: = *bar::>), C<select> with 0 or 1 argument
would sometimes return a name that could not be used to refer to the
filehandle, or sometimes it would return C<undef> even when a filehandle
was selected.  Now it returns a typeglob reference in such cases.

=item *

C<PerlIO::get_layers> no longer ignores some arguments that it thinks are
numeric, while treating others as filehandle names.  It is now consistent
for flat scalars (i.e., not references).

=item *

Unrecognised switches on C<#!> line

If a switch, such as B<-x>, that cannot occur on the C<#!> line is used
there, perl dies with "Can't emulate...".

It used to produce the same message for switches that perl did not
recognise at all, whether on the command line or the C<#!> line.

Now it produces the "Unrecognized switch" error message [perl #104288].

=item *

C<system> now temporarily blocks the SIGCHLD signal handler, to prevent the
signal handler from stealing the exit status [perl #105700].

=item *

The %n formatting code for C<printf> and C<sprintf>, which causes the number
of characters to be assigned to the next argument, now actually
assigns the number of characters, instead of the number of bytes.

It also works now with special lvalue functions like C<substr> and with
nonexistent hash and array elements [perl #3471, #103492].

=item *

Perl skips copying values returned from a subroutine, for the sake of
speed, if doing so would make no observable difference.  Due to faulty
logic, this would happen with the
result of C<delete>, C<shift> or C<splice>, even if the result was
referenced elsewhere.  It also did so with tied variables about to be freed
[perl #91844, #95548].

=item *

C<utf8::decode> now refuses to modify read-only scalars [perl #91850].

=item *

Freeing $_ inside a C<grep> or C<map> block, a code block embedded in a
regular expression, or an @INC filter (a subroutine returned by a
subroutine in @INC) used to result in double frees or crashes
[perl #91880, #92254, #92256].

=item *

C<eval> returns C<undef> in scalar context or an empty list in list
context when there is a run-time error.  When C<eval> was passed a
string in list context and a syntax error occurred, it used to return a
list containing a single undefined element.  Now it returns an empty
list in list context for all errors [perl #80630].

=item *

C<goto &func> no longer crashes, but produces an error message, when
the unwinding of the current subroutine's scope fires a destructor that
undefines the subroutine being "goneto" [perl #99850].

=item *

Perl now holds an extra reference count on the package that code is
currently compiling in.  This means that the following code no longer
crashes [perl #101486]:

    package Foo;
    BEGIN {*Foo:: = *Bar::}
    sub foo;

=item *

The C<x> repetition operator no longer crashes on 64-bit builds with large
repeat counts [perl #94560].

=item *

Calling C<require> on an implicit C<$_> when C<*CORE::GLOBAL::require> has
been overridden does not segfault anymore, and C<$_> is now passed to the
overriding subroutine [perl #78260].

=item *

C<use> and C<require> are no longer affected by the I/O layers active in
the caller's scope (enabled by L<open.pm|open>) [perl #96008].

=item *

C<our $::é; $é> (which is invalid) no longer produces the "Compilation
error at lib/utf8_heavy.pl..." error message, which it started emitting in
5.10.0 [perl #99984].

=item *

On 64-bit systems, C<read()> now understands large string offsets beyond
the 32-bit range.

=item *

Errors that occur when processing subroutine attributes no longer cause the
subroutine's op tree to leak.

=item *

Passing the same constant subroutine to both C<index> and C<formline> no
longer causes one or the other to fail [perl #89218]. (5.14.1)

=item *

List assignment to lexical variables declared with attributes in the same
statement (C<my ($x,@y) : blimp = (72,94)>) stopped working in Perl 5.8.0.
It has now been fixed.

=item *

Perl 5.10.0 introduced some faulty logic that made "U*" in the middle of
a pack template equivalent to "U0" if the input string was empty.  This has
been fixed [perl #90160].

=item *

Destructors on objects were not called during global destruction on objects
that were not referenced by any scalars.  This could happen if an array
element were blessed (e.g., C<bless \$a[0]>) or if a closure referenced a
blessed variable (C<bless \my @a; sub foo { @a }>).

Now there is an extra pass during global destruction to fire destructors on
any objects that might be left after the usual passes that check for
objects referenced by scalars [perl #36347].

=item *

Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document [perl #90128]. (5.14.1)

=item *

C<each(I<ARRAY>)> is now wrapped in C<defined(...)>, like C<each(I<HASH>)>,
inside a C<while> condition [perl #90888].

=item *

A problem with context propagation when a C<do> block is an argument to
C<return> has been fixed.  It used to cause C<undef> to be returned in
some cases of a C<return> inside an C<if> block which itself is followed by
another C<return>.

=item *

Calling C<index> with a tainted constant no longer causes constants in
subsequently compiled code to become tainted [perl #64804].

=item *

Infinite loops like C<1 while 1> used to stop C<strict 'subs'> mode from
working for the rest of the block.t

=item *

For list assignments like C<($a,$b) = ($b,$a)>, Perl has to make a copy of
the items on the right-hand side before assignment them to the left.  For
efficiency's sake, it assigns the values on the right straight to the items
on the left if no one variable is mentioned on both sides, as in C<($a,$b) =
($c,$d)>.  The logic for determining when it can cheat was faulty, in that
C<&&> and C<||> on the right-hand side could fool it.  So C<($a,$b) =
$some_true_value && ($b,$a)> would end up assigning the value of C<$b> to
both scalars.

=item *

Perl no longer tries to apply lvalue context to the string in
C<("string", $variable) ||= 1> (which used to be an error).  Since the
left-hand side of C<||=> is evaluated in scalar context, that's a scalar
comma operator, which gives all but the last item void context.  There is
no such thing as void lvalue context, so it was a mistake for Perl to try
to force it [perl #96942].

=item *

C<caller> no longer leaks memory when called from the DB package if
C<@DB::args> was assigned to after the first call to C<caller>.  L<Carp>
was triggering this bug [perl #97010].

=item *

C<close> and similar filehandle functions, when called on built-in global
variables (like C<$+>), used to die if the variable happened to hold the
undefined value, instead of producing the usual "Use of uninitialized
value" warning.

=item *

When autovivified file handles were introduced in Perl 5.6.0, C<readline>
was inadvertently made to autovivify when called as C<readline($foo)> (but
not as C<E<lt>$fooE<gt>>).  It has now been fixed never to autovivify.

=item *

Calling an undefined anonymous subroutine (e.g., what $x holds after
C<undef &{$x = sub{}}>) used to cause a "Not a CODE reference" error, which
has been corrected to "Undefined subroutine called" [perl #71154].

=item *

Causing C<@DB::args> to be freed between uses of C<caller> no longer
results in a crash [perl #93320].

=item *

C<setpgrp($foo)> used to be equivalent to C<($foo, setpgrp)>, because
C<setpgrp> was ignoring its argument if there was just one.  Now it is
equivalent to C<setpgrp($foo,0)>.

=item *

C<shmread> was not setting the scalar flags correctly when reading from
shared memory, causing the existing cached numeric representation in the
scalar to persist [perl #98480].

=item *

C<++> and C<--> now work on copies of globs, instead of dying.

=item *

C<splice()> doesn't warn when truncating

You can now limit the size of an array using C<splice(@a,MAX_LEN)> without
worrying about warnings.

=item *

C<< $$ >> is no longer tainted.  Since this value comes directly from
C<< getpid() >>, it is always safe.

=item *

The parser no longer leaks a filehandle if STDIN was closed before parsing
started [perl #37033].

=item *

C<< die; >> with a non-reference, non-string, or magical (e.g., tainted)
value in $@ now properly propagates that value [perl #111654].

=back

=head1 Known Problems

=over 4

=item *

On Solaris, we have two kinds of failure.

If F<make> is Sun's F<make≥>, we get an error about a badly formed macro
assignment in the F<Makefile>.  That happens when F<./Configure> tries to
make depends.  F<Configure> then exits  0, but further F<make>-ing fails.

If F<make> is F<gmake>, F<Configure> completes, then we get errors related
to F</usr/include/stdbool.h>

=item *

The following CPAN modules have test failures with perl 5.16.  Patches have
been submitted for all of these, so hopefully there will be new releases
soon:

=over

=item *

L<Date::Pcalc> version 6.1

=item *

L<Module::CPANTS::Analyse> version 0.85

This fails due to problems in L<Module::Find> 0.10 and L<File::MMagic>
1.27.

=item *

L<PerlIO::Util> version 0.72

=back

=back

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.14.0..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at L<http://rt.perl.org/perlbug/>.  There may also be
information at L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5-security-report@perl.org.  This points to a closed
subscription unarchived mailing list, which includes all the core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported.  Please only use this address for security issues in the Perl
core, not for modules independently distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
